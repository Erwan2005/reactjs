{"ast":null,"code":"/*! @name mpd-parser @version 0.21.0 @license Apache-2.0 */\nimport resolveUrl from '@videojs/vhs-utils/es/resolve-url';\nimport window from 'global/window';\nimport { forEachMediaGroup } from '@videojs/vhs-utils/es/media-groups';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array';\nimport { DOMParser } from '@xmldom/xmldom';\nvar version = \"0.21.0\";\n\nvar isObject = function isObject(obj) {\n  return !!obj && typeof obj === 'object';\n};\n\nvar merge = function merge() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return objects.reduce(function (result, source) {\n    if (typeof source !== 'object') {\n      return result;\n    }\n\n    Object.keys(source).forEach(function (key) {\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\n\nvar values = function values(o) {\n  return Object.keys(o).map(function (k) {\n    return o[k];\n  });\n};\n\nvar range = function range(start, end) {\n  var result = [];\n\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\n\nvar flatten = function flatten(lists) {\n  return lists.reduce(function (x, y) {\n    return x.concat(y);\n  }, []);\n};\n\nvar from = function from(list) {\n  if (!list.length) {\n    return [];\n  }\n\n  var result = [];\n\n  for (var i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\n\nvar findIndexes = function findIndexes(l, key) {\n  return l.reduce(function (a, e, i) {\n    if (e[key]) {\n      a.push(i);\n    }\n\n    return a;\n  }, []);\n};\n/**\n * Returns the first index that satisfies the matching function, or -1 if not found.\n *\n * Only necessary because of IE11 support.\n *\n * @param {Array} list - the list to search through\n * @param {Function} matchingFunction - the matching function\n *\n * @return {number} the matching index or -1 if not found\n */\n\n\nvar findIndex = function findIndex(list, matchingFunction) {\n  for (var i = 0; i < list.length; i++) {\n    if (matchingFunction(list[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n/**\n * Returns a union of the included lists provided each element can be identified by a key.\n *\n * @param {Array} list - list of lists to get the union of\n * @param {Function} keyFunction - the function to use as a key for each element\n *\n * @return {Array} the union of the arrays\n */\n\n\nvar union = function union(lists, keyFunction) {\n  return values(lists.reduce(function (acc, list) {\n    list.forEach(function (el) {\n      acc[keyFunction(el)] = el;\n    });\n    return acc;\n  }, {}));\n};\n\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls,\n *   follows  RFC 2616, Clause 14.35.1\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\n\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\n  var _ref$baseUrl = _ref.baseUrl,\n      baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,\n      _ref$source = _ref.source,\n      source = _ref$source === void 0 ? '' : _ref$source,\n      _ref$range = _ref.range,\n      range = _ref$range === void 0 ? '' : _ref$range,\n      _ref$indexRange = _ref.indexRange,\n      indexRange = _ref$indexRange === void 0 ? '' : _ref$indexRange;\n  var segment = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n\n  if (range || indexRange) {\n    var rangeStr = range ? range : indexRange;\n    var ranges = rangeStr.split('-'); // default to parsing this as a BigInt if possible\n\n    var startRange = window.BigInt ? window.BigInt(ranges[0]) : parseInt(ranges[0], 10);\n    var endRange = window.BigInt ? window.BigInt(ranges[1]) : parseInt(ranges[1], 10); // convert back to a number if less than MAX_SAFE_INTEGER\n\n    if (startRange < Number.MAX_SAFE_INTEGER && typeof startRange === 'bigint') {\n      startRange = Number(startRange);\n    }\n\n    if (endRange < Number.MAX_SAFE_INTEGER && typeof endRange === 'bigint') {\n      endRange = Number(endRange);\n    }\n\n    var length;\n\n    if (typeof endRange === 'bigint' || typeof startRange === 'bigint') {\n      length = window.BigInt(endRange) - window.BigInt(startRange) + window.BigInt(1);\n    } else {\n      length = endRange - startRange + 1;\n    }\n\n    if (typeof length === 'bigint' && length < Number.MAX_SAFE_INTEGER) {\n      length = Number(length);\n    } // byterange should be inclusive according to\n    // RFC 2616, Clause 14.35.1\n\n\n    segment.byterange = {\n      length: length,\n      offset: startRange\n    };\n  }\n\n  return segment;\n};\n\nvar byteRangeToString = function byteRangeToString(byterange) {\n  // `endRange` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  var endRange;\n\n  if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\n    endRange = window.BigInt(byterange.offset) + window.BigInt(byterange.length) - window.BigInt(1);\n  } else {\n    endRange = byterange.offset + byterange.length - 1;\n  }\n\n  return byterange.offset + \"-\" + endRange;\n};\n/**\n * parse the end number attribue that can be a string\n * number, or undefined.\n *\n * @param {string|number|undefined} endNumber\n *        The end number attribute.\n *\n * @return {number|null}\n *          The result of parsing the end number.\n */\n\n\nvar parseEndNumber = function parseEndNumber(endNumber) {\n  if (endNumber && typeof endNumber !== 'number') {\n    endNumber = parseInt(endNumber, 10);\n  }\n\n  if (isNaN(endNumber)) {\n    return null;\n  }\n\n  return endNumber;\n};\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\n\n\nvar segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  static: function _static(attributes) {\n    var duration = attributes.duration,\n        _attributes$timescale = attributes.timescale,\n        timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n        sourceDuration = attributes.sourceDuration,\n        periodDuration = attributes.periodDuration;\n    var endNumber = parseEndNumber(attributes.endNumber);\n    var segmentDuration = duration / timescale;\n\n    if (typeof endNumber === 'number') {\n      return {\n        start: 0,\n        end: endNumber\n      };\n    }\n\n    if (typeof periodDuration === 'number') {\n      return {\n        start: 0,\n        end: periodDuration / segmentDuration\n      };\n    }\n\n    return {\n      start: 0,\n      end: sourceDuration / segmentDuration\n    };\n  },\n\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic: function dynamic(attributes) {\n    var NOW = attributes.NOW,\n        clientOffset = attributes.clientOffset,\n        availabilityStartTime = attributes.availabilityStartTime,\n        _attributes$timescale2 = attributes.timescale,\n        timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n        duration = attributes.duration,\n        _attributes$periodSta = attributes.periodStart,\n        periodStart = _attributes$periodSta === void 0 ? 0 : _attributes$periodSta,\n        _attributes$minimumUp = attributes.minimumUpdatePeriod,\n        minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp,\n        _attributes$timeShift = attributes.timeShiftBufferDepth,\n        timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;\n    var endNumber = parseEndNumber(attributes.endNumber); // clientOffset is passed in at the top level of mpd-parser and is an offset calculated\n    // after retrieving UTC server time.\n\n    var now = (NOW + clientOffset) / 1000; // WC stands for Wall Clock.\n    // Convert the period start time to EPOCH.\n\n    var periodStartWC = availabilityStartTime + periodStart; // Period end in EPOCH is manifest's retrieval time + time until next update.\n\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n    return {\n      start: Math.max(0, availableStart),\n      end: typeof endNumber === 'number' ? endNumber : Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\n\nvar toSegments = function toSegments(attributes) {\n  return function (number) {\n    var duration = attributes.duration,\n        _attributes$timescale3 = attributes.timescale,\n        timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3,\n        periodStart = attributes.periodStart,\n        _attributes$startNumb = attributes.startNumber,\n        startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;\n    return {\n      number: startNumber + number,\n      duration: duration / timescale,\n      timeline: periodStart,\n      time: number * duration\n    };\n  };\n};\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\n\nvar parseByDuration = function parseByDuration(attributes) {\n  var type = attributes.type,\n      duration = attributes.duration,\n      _attributes$timescale4 = attributes.timescale,\n      timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4,\n      periodDuration = attributes.periodDuration,\n      sourceDuration = attributes.sourceDuration;\n\n  var _segmentRange$type = segmentRange[type](attributes),\n      start = _segmentRange$type.start,\n      end = _segmentRange$type.end;\n\n  var segments = range(start, end).map(toSegments(attributes));\n\n  if (type === 'static') {\n    var index = segments.length - 1; // section is either a period or the full source\n\n    var sectionDuration = typeof periodDuration === 'number' ? periodDuration : sourceDuration; // final segment may be less than full segment duration\n\n    segments[index].duration = sectionDuration - duration / timescale * index;\n  }\n\n  return segments;\n};\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\n\n\nvar segmentsFromBase = function segmentsFromBase(attributes) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$indexRang = attributes.indexRange,\n      indexRange = _attributes$indexRang === void 0 ? '' : _attributes$indexRang,\n      periodStart = attributes.periodStart,\n      presentationTime = attributes.presentationTime,\n      _attributes$number = attributes.number,\n      number = _attributes$number === void 0 ? 0 : _attributes$number,\n      duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: baseUrl,\n    indexRange: indexRange\n  });\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n\n  if (duration) {\n    var segmentTimeInfo = parseByDuration(attributes);\n\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration;\n    segment.timeline = periodStart;\n  } // If presentation time is provided, these segments are being generated by SIDX\n  // references, and should use the time provided. For the general case of SegmentBase,\n  // there should only be one segment in the period, so its presentation time is the same\n  // as its period start.\n\n\n  segment.presentationTime = presentationTime || periodStart;\n  segment.number = number;\n  return [segment];\n};\n/**\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\n * according to the sidx information given.\n *\n * playlist.sidx has metadadata about the sidx where-as the sidx param\n * is the parsed sidx box itself.\n *\n * @param {Object} playlist the playlist to update the sidx information for\n * @param {Object} sidx the parsed sidx box\n * @return {Object} the playlist object with the updated sidx information\n */\n\n\nvar addSidxSegmentsToPlaylist$1 = function addSidxSegmentsToPlaylist(playlist, sidx, baseUrl) {\n  // Retain init segment information\n  var initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing\n\n  var sourceDuration = playlist.sidx.duration; // Retain source timeline\n\n  var timeline = playlist.timeline || 0;\n  var sidxByteRange = playlist.sidx.byterange;\n  var sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n\n  var timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n\n  var mediaReferences = sidx.references.filter(function (r) {\n    return r.referenceType !== 1;\n  });\n  var segments = [];\n  var type = playlist.endList ? 'static' : 'dynamic';\n  var periodStart = playlist.sidx.timeline;\n  var presentationTime = periodStart;\n  var number = playlist.mediaSequence || 0; // firstOffset is the offset from the end of the sidx box\n\n  var startIndex; // eslint-disable-next-line\n\n  if (typeof sidx.firstOffset === 'bigint') {\n    startIndex = window.BigInt(sidxEnd) + sidx.firstOffset;\n  } else {\n    startIndex = sidxEnd + sidx.firstOffset;\n  }\n\n  for (var i = 0; i < mediaReferences.length; i++) {\n    var reference = sidx.references[i]; // size of the referenced (sub)segment\n\n    var size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n    // this will be converted to seconds when generating segments\n\n    var duration = reference.subsegmentDuration; // should be an inclusive range\n\n    var endIndex = void 0; // eslint-disable-next-line\n\n    if (typeof startIndex === 'bigint') {\n      endIndex = startIndex + window.BigInt(size) - window.BigInt(1);\n    } else {\n      endIndex = startIndex + size - 1;\n    }\n\n    var indexRange = startIndex + \"-\" + endIndex;\n    var attributes = {\n      baseUrl: baseUrl,\n      timescale: timescale,\n      timeline: timeline,\n      periodStart: periodStart,\n      presentationTime: presentationTime,\n      number: number,\n      duration: duration,\n      sourceDuration: sourceDuration,\n      indexRange: indexRange,\n      type: type\n    };\n    var segment = segmentsFromBase(attributes)[0];\n\n    if (initSegment) {\n      segment.map = initSegment;\n    }\n\n    segments.push(segment);\n\n    if (typeof startIndex === 'bigint') {\n      startIndex += window.BigInt(size);\n    } else {\n      startIndex += size;\n    }\n\n    presentationTime += duration / timescale;\n    number++;\n  }\n\n  playlist.segments = segments;\n  return playlist;\n};\n\nvar SUPPORTED_MEDIA_TYPES = ['AUDIO', 'SUBTITLES']; // allow one 60fps frame as leniency (arbitrarily chosen)\n\nvar TIME_FUDGE = 1 / 60;\n/**\n * Given a list of timelineStarts, combines, dedupes, and sorts them.\n *\n * @param {TimelineStart[]} timelineStarts - list of timeline starts\n *\n * @return {TimelineStart[]} the combined and deduped timeline starts\n */\n\nvar getUniqueTimelineStarts = function getUniqueTimelineStarts(timelineStarts) {\n  return union(timelineStarts, function (_ref) {\n    var timeline = _ref.timeline;\n    return timeline;\n  }).sort(function (a, b) {\n    return a.timeline > b.timeline ? 1 : -1;\n  });\n};\n/**\n * Finds the playlist with the matching NAME attribute.\n *\n * @param {Array} playlists - playlists to search through\n * @param {string} name - the NAME attribute to search for\n *\n * @return {Object|null} the matching playlist object, or null\n */\n\n\nvar findPlaylistWithName = function findPlaylistWithName(playlists, name) {\n  for (var i = 0; i < playlists.length; i++) {\n    if (playlists[i].attributes.NAME === name) {\n      return playlists[i];\n    }\n  }\n\n  return null;\n};\n/**\n * Gets a flattened array of media group playlists.\n *\n * @param {Object} manifest - the main manifest object\n *\n * @return {Array} the media group playlists\n */\n\n\nvar getMediaGroupPlaylists = function getMediaGroupPlaylists(manifest) {\n  var mediaGroupPlaylists = [];\n  forEachMediaGroup(manifest, SUPPORTED_MEDIA_TYPES, function (properties, type, group, label) {\n    mediaGroupPlaylists = mediaGroupPlaylists.concat(properties.playlists || []);\n  });\n  return mediaGroupPlaylists;\n};\n/**\n * Updates the playlist's media sequence numbers.\n *\n * @param {Object} config - options object\n * @param {Object} config.playlist - the playlist to update\n * @param {number} config.mediaSequence - the mediaSequence number to start with\n */\n\n\nvar updateMediaSequenceForPlaylist = function updateMediaSequenceForPlaylist(_ref2) {\n  var playlist = _ref2.playlist,\n      mediaSequence = _ref2.mediaSequence;\n  playlist.mediaSequence = mediaSequence;\n  playlist.segments.forEach(function (segment, index) {\n    segment.number = playlist.mediaSequence + index;\n  });\n};\n/**\n * Updates the media and discontinuity sequence numbers of newPlaylists given oldPlaylists\n * and a complete list of timeline starts.\n *\n * If no matching playlist is found, only the discontinuity sequence number of the playlist\n * will be updated.\n *\n * Since early available timelines are not supported, at least one segment must be present.\n *\n * @param {Object} config - options object\n * @param {Object[]} oldPlaylists - the old playlists to use as a reference\n * @param {Object[]} newPlaylists - the new playlists to update\n * @param {Object} timelineStarts - all timelineStarts seen in the stream to this point\n */\n\n\nvar updateSequenceNumbers = function updateSequenceNumbers(_ref3) {\n  var oldPlaylists = _ref3.oldPlaylists,\n      newPlaylists = _ref3.newPlaylists,\n      timelineStarts = _ref3.timelineStarts;\n  newPlaylists.forEach(function (playlist) {\n    playlist.discontinuitySequence = findIndex(timelineStarts, function (_ref4) {\n      var timeline = _ref4.timeline;\n      return timeline === playlist.timeline;\n    }); // Playlists NAMEs come from DASH Representation IDs, which are mandatory\n    // (see ISO_23009-1-2012 5.3.5.2).\n    //\n    // If the same Representation existed in a prior Period, it will retain the same NAME.\n\n    var oldPlaylist = findPlaylistWithName(oldPlaylists, playlist.attributes.NAME);\n\n    if (!oldPlaylist) {\n      // Since this is a new playlist, the media sequence values can start from 0 without\n      // consequence.\n      return;\n    } // TODO better support for live SIDX\n    //\n    // As of this writing, mpd-parser does not support multiperiod SIDX (in live or VOD).\n    // This is evident by a playlist only having a single SIDX reference. In a multiperiod\n    // playlist there would need to be multiple SIDX references. In addition, live SIDX is\n    // not supported when the SIDX properties change on refreshes.\n    //\n    // In the future, if support needs to be added, the merging logic here can be called\n    // after SIDX references are resolved. For now, exit early to prevent exceptions being\n    // thrown due to undefined references.\n\n\n    if (playlist.sidx) {\n      return;\n    } // Since we don't yet support early available timelines, we don't need to support\n    // playlists with no segments.\n\n\n    var firstNewSegment = playlist.segments[0];\n    var oldMatchingSegmentIndex = findIndex(oldPlaylist.segments, function (oldSegment) {\n      return Math.abs(oldSegment.presentationTime - firstNewSegment.presentationTime) < TIME_FUDGE;\n    }); // No matching segment from the old playlist means the entire playlist was refreshed.\n    // In this case the media sequence should account for this update, and the new segments\n    // should be marked as discontinuous from the prior content, since the last prior\n    // timeline was removed.\n\n    if (oldMatchingSegmentIndex === -1) {\n      updateMediaSequenceForPlaylist({\n        playlist: playlist,\n        mediaSequence: oldPlaylist.mediaSequence + oldPlaylist.segments.length\n      });\n      playlist.segments[0].discontinuity = true;\n      playlist.discontinuityStarts.unshift(0); // No matching segment does not necessarily mean there's missing content.\n      //\n      // If the new playlist's timeline is the same as the last seen segment's timeline,\n      // then a discontinuity can be added to identify that there's potentially missing\n      // content. If there's no missing content, the discontinuity should still be rather\n      // harmless. It's possible that if segment durations are accurate enough, that the\n      // existence of a gap can be determined using the presentation times and durations,\n      // but if the segment timing info is off, it may introduce more problems than simply\n      // adding the discontinuity.\n      //\n      // If the new playlist's timeline is different from the last seen segment's timeline,\n      // then a discontinuity can be added to identify that this is the first seen segment\n      // of a new timeline. However, the logic at the start of this function that\n      // determined the disconinuity sequence by timeline index is now off by one (the\n      // discontinuity of the newest timeline hasn't yet fallen off the manifest...since\n      // we added it), so the disconinuity sequence must be decremented.\n      //\n      // A period may also have a duration of zero, so the case of no segments is handled\n      // here even though we don't yet support early available periods.\n\n      if (!oldPlaylist.segments.length && playlist.timeline > oldPlaylist.timeline || oldPlaylist.segments.length && playlist.timeline > oldPlaylist.segments[oldPlaylist.segments.length - 1].timeline) {\n        playlist.discontinuitySequence--;\n      }\n\n      return;\n    } // If the first segment matched with a prior segment on a discontinuity (it's matching\n    // on the first segment of a period), then the discontinuitySequence shouldn't be the\n    // timeline's matching one, but instead should be the one prior, and the first segment\n    // of the new manifest should be marked with a discontinuity.\n    //\n    // The reason for this special case is that discontinuity sequence shows how many\n    // discontinuities have fallen off of the playlist, and discontinuities are marked on\n    // the first segment of a new \"timeline.\" Because of this, while DASH will retain that\n    // Period while the \"timeline\" exists, HLS keeps track of it via the discontinuity\n    // sequence, and that first segment is an indicator, but can be removed before that\n    // timeline is gone.\n\n\n    var oldMatchingSegment = oldPlaylist.segments[oldMatchingSegmentIndex];\n\n    if (oldMatchingSegment.discontinuity && !firstNewSegment.discontinuity) {\n      firstNewSegment.discontinuity = true;\n      playlist.discontinuityStarts.unshift(0);\n      playlist.discontinuitySequence--;\n    }\n\n    updateMediaSequenceForPlaylist({\n      playlist: playlist,\n      mediaSequence: oldPlaylist.segments[oldMatchingSegmentIndex].number\n    });\n  });\n};\n/**\n * Given an old parsed manifest object and a new parsed manifest object, updates the\n * sequence and timing values within the new manifest to ensure that it lines up with the\n * old.\n *\n * @param {Array} oldManifest - the old main manifest object\n * @param {Array} newManifest - the new main manifest object\n *\n * @return {Object} the updated new manifest object\n */\n\n\nvar positionManifestOnTimeline = function positionManifestOnTimeline(_ref5) {\n  var oldManifest = _ref5.oldManifest,\n      newManifest = _ref5.newManifest; // Starting from v4.1.2 of the IOP, section 4.4.3.3 states:\n  //\n  // \"MPD@availabilityStartTime and Period@start shall not be changed over MPD updates.\"\n  //\n  // This was added from https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160\n  //\n  // Because of this change, and the difficulty of supporting periods with changing start\n  // times, periods with changing start times are not supported. This makes the logic much\n  // simpler, since periods with the same start time can be considerred the same period\n  // across refreshes.\n  //\n  // To give an example as to the difficulty of handling periods where the start time may\n  // change, if a single period manifest is refreshed with another manifest with a single\n  // period, and both the start and end times are increased, then the only way to determine\n  // if it's a new period or an old one that has changed is to look through the segments of\n  // each playlist and determine the presentation time bounds to find a match. In addition,\n  // if the period start changed to exceed the old period end, then there would be no\n  // match, and it would not be possible to determine whether the refreshed period is a new\n  // one or the old one.\n\n  var oldPlaylists = oldManifest.playlists.concat(getMediaGroupPlaylists(oldManifest));\n  var newPlaylists = newManifest.playlists.concat(getMediaGroupPlaylists(newManifest)); // Save all seen timelineStarts to the new manifest. Although this potentially means that\n  // there's a \"memory leak\" in that it will never stop growing, in reality, only a couple\n  // of properties are saved for each seen Period. Even long running live streams won't\n  // generate too many Periods, unless the stream is watched for decades. In the future,\n  // this can be optimized by mapping to discontinuity sequence numbers for each timeline,\n  // but it may not become an issue, and the additional info can be useful for debugging.\n\n  newManifest.timelineStarts = getUniqueTimelineStarts([oldManifest.timelineStarts, newManifest.timelineStarts]);\n  updateSequenceNumbers({\n    oldPlaylists: oldPlaylists,\n    newPlaylists: newPlaylists,\n    timelineStarts: newManifest.timelineStarts\n  });\n  return newManifest;\n};\n\nvar generateSidxKey = function generateSidxKey(sidx) {\n  return sidx && sidx.uri + '-' + byteRangeToString(sidx.byterange);\n};\n\nvar mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {\n  var mergedPlaylists = values(playlists.reduce(function (acc, playlist) {\n    // assuming playlist IDs are the same across periods\n    // TODO: handle multiperiod where representation sets are not the same\n    // across periods\n    var name = playlist.attributes.id + (playlist.attributes.lang || '');\n\n    if (!acc[name]) {\n      // First Period\n      acc[name] = playlist;\n      acc[name].attributes.timelineStarts = [];\n    } else {\n      // Subsequent Periods\n      if (playlist.segments) {\n        var _acc$name$segments; // first segment of subsequent periods signal a discontinuity\n\n\n        if (playlist.segments[0]) {\n          playlist.segments[0].discontinuity = true;\n        }\n\n        (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments);\n      } // bubble up contentProtection, this assumes all DRM content\n      // has the same contentProtection\n\n\n      if (playlist.attributes.contentProtection) {\n        acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n      }\n    }\n\n    acc[name].attributes.timelineStarts.push({\n      // Although they represent the same number, it's important to have both to make it\n      // compatible with HLS potentially having a similar attribute.\n      start: playlist.attributes.periodStart,\n      timeline: playlist.attributes.periodStart\n    });\n    return acc;\n  }, {}));\n  return mergedPlaylists.map(function (playlist) {\n    playlist.discontinuityStarts = findIndexes(playlist.segments || [], 'discontinuity');\n    return playlist;\n  });\n};\n\nvar addSidxSegmentsToPlaylist = function addSidxSegmentsToPlaylist(playlist, sidxMapping) {\n  var sidxKey = generateSidxKey(playlist.sidx);\n  var sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n\n  if (sidxMatch) {\n    addSidxSegmentsToPlaylist$1(playlist, sidxMatch, playlist.sidx.resolvedUri);\n  }\n\n  return playlist;\n};\n\nvar addSidxSegmentsToPlaylists = function addSidxSegmentsToPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (!Object.keys(sidxMapping).length) {\n    return playlists;\n  }\n\n  for (var i in playlists) {\n    playlists[i] = addSidxSegmentsToPlaylist(playlists[i], sidxMapping);\n  }\n\n  return playlists;\n};\n\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref, isAudioOnly) {\n  var _attributes;\n\n  var attributes = _ref.attributes,\n      segments = _ref.segments,\n      sidx = _ref.sidx,\n      mediaSequence = _ref.mediaSequence,\n      discontinuitySequence = _ref.discontinuitySequence,\n      discontinuityStarts = _ref.discontinuityStarts;\n  var playlist = {\n    attributes: (_attributes = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs\n    }, _attributes['PROGRAM-ID'] = 1, _attributes),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    discontinuitySequence: discontinuitySequence,\n    discontinuityStarts: discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    mediaSequence: mediaSequence,\n    segments: segments\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  if (isAudioOnly) {\n    playlist.attributes.AUDIO = 'audio';\n    playlist.attributes.SUBTITLES = 'subs';\n  }\n\n  return playlist;\n};\n\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\n  var _m3u8Attributes;\n\n  var attributes = _ref2.attributes,\n      segments = _ref2.segments,\n      mediaSequence = _ref2.mediaSequence,\n      discontinuityStarts = _ref2.discontinuityStarts,\n      discontinuitySequence = _ref2.discontinuitySequence;\n\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodStart,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }]; // targetDuration should be the same duration as the only segment\n\n    attributes.duration = attributes.sourceDuration;\n  }\n\n  var m3u8Attributes = (_m3u8Attributes = {\n    NAME: attributes.id,\n    BANDWIDTH: attributes.bandwidth\n  }, _m3u8Attributes['PROGRAM-ID'] = 1, _m3u8Attributes);\n\n  if (attributes.codecs) {\n    m3u8Attributes.CODECS = attributes.codecs;\n  }\n\n  return {\n    attributes: m3u8Attributes,\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    timelineStarts: attributes.timelineStarts,\n    discontinuityStarts: discontinuityStarts,\n    discontinuitySequence: discontinuitySequence,\n    mediaSequence: mediaSequence,\n    segments: segments\n  };\n};\n\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists, sidxMapping, isAudioOnly) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (isAudioOnly === void 0) {\n    isAudioOnly = false;\n  }\n\n  var mainPlaylist;\n  var formattedPlaylists = playlists.reduce(function (a, playlist) {\n    var role = playlist.attributes.role && playlist.attributes.role.value || '';\n    var language = playlist.attributes.lang || '';\n    var label = playlist.attributes.label || 'main';\n\n    if (language && !playlist.attributes.label) {\n      var roleLabel = role ? \" (\" + role + \")\" : '';\n      label = \"\" + playlist.attributes.lang + roleLabel;\n    }\n\n    if (!a[label]) {\n      a[label] = {\n        language: language,\n        autoselect: true,\n        default: role === 'main',\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    var formatted = addSidxSegmentsToPlaylist(formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);\n    a[label].playlists.push(formatted);\n\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\n      mainPlaylist = playlist;\n      mainPlaylist.default = true;\n    }\n\n    return a;\n  }, {}); // if no playlists have role \"main\", mark the first as main\n\n  if (!mainPlaylist) {\n    var firstLabel = Object.keys(formattedPlaylists)[0];\n    formattedPlaylists[firstLabel].default = true;\n  }\n\n  return formattedPlaylists;\n};\n\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  return playlists.reduce(function (a, playlist) {\n    var label = playlist.attributes.lang || 'text';\n\n    if (!a[label]) {\n      a[label] = {\n        language: label,\n        default: false,\n        autoselect: false,\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    a[label].playlists.push(addSidxSegmentsToPlaylist(formatVttPlaylist(playlist), sidxMapping));\n    return a;\n  }, {});\n};\n\nvar organizeCaptionServices = function organizeCaptionServices(captionServices) {\n  return captionServices.reduce(function (svcObj, svc) {\n    if (!svc) {\n      return svcObj;\n    }\n\n    svc.forEach(function (service) {\n      var channel = service.channel,\n          language = service.language;\n      svcObj[language] = {\n        autoselect: false,\n        default: false,\n        instreamId: channel,\n        language: language\n      };\n\n      if (service.hasOwnProperty('aspectRatio')) {\n        svcObj[language].aspectRatio = service.aspectRatio;\n      }\n\n      if (service.hasOwnProperty('easyReader')) {\n        svcObj[language].easyReader = service.easyReader;\n      }\n\n      if (service.hasOwnProperty('3D')) {\n        svcObj[language]['3D'] = service['3D'];\n      }\n    });\n    return svcObj;\n  }, {});\n};\n\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\n  var _attributes2;\n\n  var attributes = _ref3.attributes,\n      segments = _ref3.segments,\n      sidx = _ref3.sidx,\n      discontinuityStarts = _ref3.discontinuityStarts;\n  var playlist = {\n    attributes: (_attributes2 = {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    discontinuityStarts: discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    segments: segments\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  return playlist;\n};\n\nvar videoOnly = function videoOnly(_ref4) {\n  var attributes = _ref4.attributes;\n  return attributes.mimeType === 'video/mp4' || attributes.mimeType === 'video/webm' || attributes.contentType === 'video';\n};\n\nvar audioOnly = function audioOnly(_ref5) {\n  var attributes = _ref5.attributes;\n  return attributes.mimeType === 'audio/mp4' || attributes.mimeType === 'audio/webm' || attributes.contentType === 'audio';\n};\n\nvar vttOnly = function vttOnly(_ref6) {\n  var attributes = _ref6.attributes;\n  return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n};\n/**\n * Contains start and timeline properties denoting a timeline start. For DASH, these will\n * be the same number.\n *\n * @typedef {Object} TimelineStart\n * @property {number} start - the start time of the timeline\n * @property {number} timeline - the timeline number\n */\n\n/**\n * Adds appropriate media and discontinuity sequence values to the segments and playlists.\n *\n * Throughout mpd-parser, the `number` attribute is used in relation to `startNumber`, a\n * DASH specific attribute used in constructing segment URI's from templates. However, from\n * an HLS perspective, the `number` attribute on a segment would be its `mediaSequence`\n * value, which should start at the original media sequence value (or 0) and increment by 1\n * for each segment thereafter. Since DASH's `startNumber` values are independent per\n * period, it doesn't make sense to use it for `number`. Instead, assume everything starts\n * from a 0 mediaSequence value and increment from there.\n *\n * Note that VHS currently doesn't use the `number` property, but it can be helpful for\n * debugging and making sense of the manifest.\n *\n * For live playlists, to account for values increasing in manifests when periods are\n * removed on refreshes, merging logic should be used to update the numbers to their\n * appropriate values (to ensure they're sequential and increasing).\n *\n * @param {Object[]} playlists - the playlists to update\n * @param {TimelineStart[]} timelineStarts - the timeline starts for the manifest\n */\n\n\nvar addMediaSequenceValues = function addMediaSequenceValues(playlists, timelineStarts) {\n  // increment all segments sequentially\n  playlists.forEach(function (playlist) {\n    playlist.mediaSequence = 0;\n    playlist.discontinuitySequence = findIndex(timelineStarts, function (_ref7) {\n      var timeline = _ref7.timeline;\n      return timeline === playlist.timeline;\n    });\n\n    if (!playlist.segments) {\n      return;\n    }\n\n    playlist.segments.forEach(function (segment, index) {\n      segment.number = index;\n    });\n  });\n};\n/**\n * Given a media group object, flattens all playlists within the media group into a single\n * array.\n *\n * @param {Object} mediaGroupObject - the media group object\n *\n * @return {Object[]}\n *         The media group playlists\n */\n\n\nvar flattenMediaGroupPlaylists = function flattenMediaGroupPlaylists(mediaGroupObject) {\n  if (!mediaGroupObject) {\n    return [];\n  }\n\n  return Object.keys(mediaGroupObject).reduce(function (acc, label) {\n    var labelContents = mediaGroupObject[label];\n    return acc.concat(labelContents.playlists);\n  }, []);\n};\n\nvar toM3u8 = function toM3u8(_ref8) {\n  var _mediaGroups;\n\n  var dashPlaylists = _ref8.dashPlaylists,\n      locations = _ref8.locations,\n      _ref8$sidxMapping = _ref8.sidxMapping,\n      sidxMapping = _ref8$sidxMapping === void 0 ? {} : _ref8$sidxMapping,\n      previousManifest = _ref8.previousManifest;\n\n  if (!dashPlaylists.length) {\n    return {};\n  } // grab all main manifest attributes\n\n\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\n      duration = _dashPlaylists$0$attr.sourceDuration,\n      type = _dashPlaylists$0$attr.type,\n      suggestedPresentationDelay = _dashPlaylists$0$attr.suggestedPresentationDelay,\n      minimumUpdatePeriod = _dashPlaylists$0$attr.minimumUpdatePeriod;\n  var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n  var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n  var vttPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(vttOnly));\n  var captions = dashPlaylists.map(function (playlist) {\n    return playlist.attributes.captionServices;\n  }).filter(Boolean);\n  var manifest = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: (_mediaGroups = {\n      AUDIO: {},\n      VIDEO: {}\n    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\n    uri: '',\n    duration: duration,\n    playlists: addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)\n  };\n\n  if (minimumUpdatePeriod >= 0) {\n    manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\n  }\n\n  if (locations) {\n    manifest.locations = locations;\n  }\n\n  if (type === 'dynamic') {\n    manifest.suggestedPresentationDelay = suggestedPresentationDelay;\n  }\n\n  var isAudioOnly = manifest.playlists.length === 0;\n  var organizedAudioGroup = audioPlaylists.length ? organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly) : null;\n  var organizedVttGroup = vttPlaylists.length ? organizeVttPlaylists(vttPlaylists, sidxMapping) : null;\n  var formattedPlaylists = videoPlaylists.concat(flattenMediaGroupPlaylists(organizedAudioGroup), flattenMediaGroupPlaylists(organizedVttGroup));\n  var playlistTimelineStarts = formattedPlaylists.map(function (_ref9) {\n    var timelineStarts = _ref9.timelineStarts;\n    return timelineStarts;\n  });\n  manifest.timelineStarts = getUniqueTimelineStarts(playlistTimelineStarts);\n  addMediaSequenceValues(formattedPlaylists, manifest.timelineStarts);\n\n  if (organizedAudioGroup) {\n    manifest.mediaGroups.AUDIO.audio = organizedAudioGroup;\n  }\n\n  if (organizedVttGroup) {\n    manifest.mediaGroups.SUBTITLES.subs = organizedVttGroup;\n  }\n\n  if (captions.length) {\n    manifest.mediaGroups['CLOSED-CAPTIONS'].cc = organizeCaptionServices(captions);\n  }\n\n  if (previousManifest) {\n    return positionManifestOnTimeline({\n      oldManifest: previousManifest,\n      newManifest: manifest\n    });\n  }\n\n  return manifest;\n};\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\n\n\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\n  var NOW = attributes.NOW,\n      clientOffset = attributes.clientOffset,\n      availabilityStartTime = attributes.availabilityStartTime,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n      _attributes$periodSta = attributes.periodStart,\n      periodStart = _attributes$periodSta === void 0 ? 0 : _attributes$periodSta,\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;\n  var now = (NOW + clientOffset) / 1000;\n  var periodStartWC = availabilityStartTime + periodStart;\n  var periodEndWC = now + minimumUpdatePeriod;\n  var periodDuration = periodEndWC - periodStartWC;\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\n\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n  var type = attributes.type,\n      _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2,\n      _attributes$media = attributes.media,\n      media = _attributes$media === void 0 ? '' : _attributes$media,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale2 = attributes.timescale,\n      timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n      _attributes$startNumb = attributes.startNumber,\n      startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb,\n      timeline = attributes.periodStart;\n  var segments = [];\n  var time = -1;\n\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    var S = segmentTimeline[sIndex];\n    var duration = S.d;\n    var repeat = S.r || 0;\n    var segmentTime = S.t || 0;\n\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n      time = segmentTime;\n    }\n\n    var count = void 0;\n\n    if (repeat < 0) {\n      var nextS = sIndex + 1;\n\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n\n    var end = startNumber + segments.length + count;\n    var number = startNumber + segments.length;\n\n    while (number < end) {\n      segments.push({\n        number: number,\n        duration: duration / timescale,\n        time: time,\n        timeline: timeline\n      });\n      time += duration;\n      number++;\n    }\n  }\n\n  return segments;\n};\n\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\n\nvar identifierReplacement = function identifierReplacement(values) {\n  return function (match, identifier, format, width) {\n    if (match === '$$') {\n      // escape sequence\n      return '$';\n    }\n\n    if (typeof values[identifier] === 'undefined') {\n      return match;\n    }\n\n    var value = '' + values[identifier];\n\n    if (identifier === 'RepresentationID') {\n      // Format tag shall not be present with RepresentationID\n      return value;\n    }\n\n    if (!format) {\n      width = 1;\n    } else {\n      width = parseInt(width, 10);\n    }\n\n    if (value.length >= width) {\n      return value;\n    }\n\n    return \"\" + new Array(width - value.length + 1).join('0') + value;\n  };\n};\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\n\n\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\n  return url.replace(identifierPattern, identifierReplacement(values));\n};\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\n\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodStart\n    }];\n  }\n\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n\n  return parseByTimeline(attributes, segmentTimeline);\n};\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\n\n\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n  var templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n  var _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {\n    sourceURL: '',\n    range: ''\n  } : _attributes$initializ;\n  var mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\n  return segments.map(function (segment) {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n    var uri = constructTemplateUrl(attributes.media || '', templateValues); // See DASH spec section 5.3.9.2.2\n    // - if timescale isn't present on any level, default to 1.\n\n    var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n    var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n    var presentationTime = // Even if the @t attribute is not specified for the segment, segment.time is\n    // calculated in mpd-parser prior to this, so it's assumed to be available.\n    attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;\n    var map = {\n      uri: uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number,\n      presentationTime: presentationTime\n    };\n    return map;\n  });\n};\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\n\n\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n  segment.map = initSegment;\n  return segment;\n};\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\n\n\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n  var duration = attributes.duration,\n      _attributes$segmentUr = attributes.segmentUrls,\n      segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr,\n      periodStart = attributes.periodStart; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n  });\n  var segmentTimeInfo;\n\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\n    if (segmentUrlMap[index]) {\n      var segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2\n      // - if timescale isn't present on any level, default to 1.\n\n      var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n      var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;\n      return segment;\n    } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n\n  }).filter(function (segment) {\n    return segment;\n  });\n  return segments;\n};\n\nvar generateSegments = function generateSegments(_ref) {\n  var attributes = _ref.attributes,\n      segmentInfo = _ref.segmentInfo;\n  var segmentAttributes;\n  var segmentsFn;\n\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n\n  var segmentsInfo = {\n    attributes: attributes\n  };\n\n  if (!segmentsFn) {\n    return segmentsInfo;\n  }\n\n  var segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n\n  if (segmentAttributes.duration) {\n    var _segmentAttributes = segmentAttributes,\n        duration = _segmentAttributes.duration,\n        _segmentAttributes$ti = _segmentAttributes.timescale,\n        timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n\n  segmentsInfo.attributes = segmentAttributes;\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n\n  if (segmentInfo.base && segmentAttributes.indexRange) {\n    segmentsInfo.sidx = segments[0];\n    segmentsInfo.segments = [];\n  }\n\n  return segmentsInfo;\n};\n\nvar toPlaylists = function toPlaylists(representations) {\n  return representations.map(generateSegments);\n};\n\nvar findChildren = function findChildren(element, name) {\n  return from(element.childNodes).filter(function (_ref) {\n    var tagName = _ref.tagName;\n    return tagName === name;\n  });\n};\n\nvar getContent = function getContent(element) {\n  return element.textContent.trim();\n};\n\nvar parseDuration = function parseDuration(str) {\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  var SECONDS_IN_DAY = 24 * 60 * 60;\n  var SECONDS_IN_HOUR = 60 * 60;\n  var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  var match = durationRegex.exec(str);\n\n  if (!match) {\n    return 0;\n  }\n\n  var _match$slice = match.slice(1),\n      year = _match$slice[0],\n      month = _match$slice[1],\n      day = _match$slice[2],\n      hour = _match$slice[3],\n      minute = _match$slice[4],\n      second = _match$slice[5];\n\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\n\nvar parseDate = function parseDate(str) {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n\n  return Date.parse(str);\n};\n\nvar parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime: function availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the suggested presentation delay. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  suggestedPresentationDelay: function suggestedPresentationDelay(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   *\n   * @return {string}\n   *         The type as a string\n   */\n  type: function type(value) {\n    return value;\n  },\n\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start: function start(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width: function width(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height: function height(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth: function bandwidth(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber: function startNumber(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed timescale\n   */\n  timescale: function timescale(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the presentationTimeOffset.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTimeOffset\n   */\n  presentationTimeOffset: function presentationTimeOffset(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration: function duration(value) {\n    var parsedValue = parseInt(value, 10);\n\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n\n    return parsedValue;\n  },\n\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d: function d(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t: function t(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r: function r(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT: function DEFAULT(value) {\n    return value;\n  }\n};\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\n\nvar parseAttributes = function parseAttributes(el) {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n\n  return from(el.attributes).reduce(function (a, e) {\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\n    a[e.name] = parseFn(e.value);\n    return a;\n  }, {});\n};\n\nvar keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'\n};\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {string[]} referenceUrls\n *        List of reference urls to resolve to\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {string[]}\n *         List of resolved urls\n */\n\nvar buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\n  if (!baseUrlElements.length) {\n    return referenceUrls;\n  }\n\n  return flatten(referenceUrls.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      return resolveUrl(reference, getContent(baseUrlElement));\n    });\n  }));\n};\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} segmentTimeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\n\n\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\n    return merge({\n      tag: 'SegmentURL'\n    }, parseAttributes(s));\n  });\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\n\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = {\n      sourceURL: template.initialization\n    };\n  }\n\n  var segmentInfo = {\n    template: template,\n    segmentTimeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\n      return parseAttributes(s);\n    }),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls: segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n  Object.keys(segmentInfo).forEach(function (key) {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n  return segmentInfo;\n};\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {string[]} adaptationSetBaseUrls\n *        Contains list of resolved base urls inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\n\n\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n  return function (representation) {\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n    var representationSegmentInfo = getSegmentInformation(representation);\n    return repBaseUrls.map(function (baseUrl) {\n      return {\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n        attributes: merge(attributes, {\n          baseUrl: baseUrl\n        })\n      };\n    });\n  };\n};\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\n\n\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n  return contentProtectionNodes.reduce(function (acc, node) {\n    var attributes = parseAttributes(node);\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\n\n    if (keySystem) {\n      acc[keySystem] = {\n        attributes: attributes\n      };\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\n\n      if (psshNode) {\n        var pssh = getContent(psshNode);\n        var psshBuffer = pssh && decodeB64ToUint8Array(pssh);\n        acc[keySystem].pssh = psshBuffer;\n      }\n    }\n\n    return acc;\n  }, {});\n}; // defined in ANSI_SCTE 214-1 2016\n\n\nvar parseCaptionServiceMetadata = function parseCaptionServiceMetadata(service) {\n  // 608 captions\n  if (service.schemeIdUri === 'urn:scte:dash:cc:cea-608:2015') {\n    var values = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return values.map(function (value) {\n      var channel;\n      var language; // default language to value\n\n      language = value;\n\n      if (/^CC\\d=/.test(value)) {\n        var _value$split = value.split('=');\n\n        channel = _value$split[0];\n        language = _value$split[1];\n      } else if (/^CC\\d$/.test(value)) {\n        channel = value;\n      }\n\n      return {\n        channel: channel,\n        language: language\n      };\n    });\n  } else if (service.schemeIdUri === 'urn:scte:dash:cc:cea-708:2015') {\n    var _values = typeof service.value !== 'string' ? [] : service.value.split(';');\n\n    return _values.map(function (value) {\n      var flags = {\n        // service or channel number 1-63\n        'channel': undefined,\n        // language is a 3ALPHA per ISO 639.2/B\n        // field is required\n        'language': undefined,\n        // BIT 1/0 or ?\n        // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown\n        'aspectRatio': 1,\n        // BIT 1/0\n        // easy reader flag indicated the text is tailed to the needs of beginning readers\n        // default 0, or off\n        'easyReader': 0,\n        // BIT 1/0\n        // If 3d metadata is present (CEA-708.1) then 1\n        // default 0\n        '3D': 0\n      };\n\n      if (/=/.test(value)) {\n        var _value$split2 = value.split('='),\n            channel = _value$split2[0],\n            _value$split2$ = _value$split2[1],\n            opts = _value$split2$ === void 0 ? '' : _value$split2$;\n\n        flags.channel = channel;\n        flags.language = value;\n        opts.split(',').forEach(function (opt) {\n          var _opt$split = opt.split(':'),\n              name = _opt$split[0],\n              val = _opt$split[1];\n\n          if (name === 'lang') {\n            flags.language = val; // er for easyReadery\n          } else if (name === 'er') {\n            flags.easyReader = Number(val); // war for wide aspect ratio\n          } else if (name === 'war') {\n            flags.aspectRatio = Number(val);\n          } else if (name === '3D') {\n            flags['3D'] = Number(val);\n          }\n        });\n      } else {\n        flags.language = value;\n      }\n\n      if (flags.channel) {\n        flags.channel = 'SERVICE' + flags.channel;\n      }\n\n      return flags;\n    });\n  }\n};\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {string[]} periodBaseUrls\n *        Contains list of resolved base urls inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\n\n\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n  return function (adaptationSet) {\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n    var role = findChildren(adaptationSet, 'Role')[0];\n    var roleAttributes = {\n      role: parseAttributes(role)\n    };\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n    var accessibility = findChildren(adaptationSet, 'Accessibility')[0];\n    var captionServices = parseCaptionServiceMetadata(parseAttributes(accessibility));\n\n    if (captionServices) {\n      attrs = merge(attrs, {\n        captionServices: captionServices\n      });\n    }\n\n    var label = findChildren(adaptationSet, 'Label')[0];\n\n    if (label && label.childNodes.length) {\n      var labelVal = label.childNodes[0].nodeValue.trim();\n      attrs = merge(attrs, {\n        label: labelVal\n      });\n    }\n\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n\n    if (Object.keys(contentProtection).length) {\n      attrs = merge(attrs, {\n        contentProtection: contentProtection\n      });\n    }\n\n    var segmentInfo = getSegmentInformation(adaptationSet);\n    var representations = findChildren(adaptationSet, 'Representation');\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n  };\n};\n/**\n * Contains all period information for mapping nodes onto adaptation sets.\n *\n * @typedef {Object} PeriodInformation\n * @property {Node} period.node\n *           Period node from the mpd\n * @property {Object} period.attributes\n *           Parsed period attributes from node plus any added\n */\n\n/**\n * Maps a PeriodInformation object to a list of Representation information objects for all\n * AdaptationSet nodes contained within the Period.\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {PeriodInformation} period\n *        Period object containing necessary period information\n * @param {number} periodStart\n *        Start time of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n * @param {string[]} mpdBaseUrls\n *        Contains list of resolved base urls inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\n\n\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n  return function (period, index) {\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period.node, 'BaseURL'));\n    var periodAttributes = merge(mpdAttributes, {\n      periodStart: period.attributes.start\n    });\n\n    if (typeof period.attributes.duration === 'number') {\n      periodAttributes.periodDuration = period.attributes.duration;\n    }\n\n    var adaptationSets = findChildren(period.node, 'AdaptationSet');\n    var periodSegmentInfo = getSegmentInformation(period.node);\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n  };\n};\n/**\n * Gets Period@start property for a given period.\n *\n * @param {Object} options\n *        Options object\n * @param {Object} options.attributes\n *        Period attributes\n * @param {Object} [options.priorPeriodAttributes]\n *        Prior period attributes (if prior period is available)\n * @param {string} options.mpdType\n *        The MPD@type these periods came from\n * @return {number|null}\n *         The period start, or null if it's an early available period or error\n */\n\n\nvar getPeriodStart = function getPeriodStart(_ref) {\n  var attributes = _ref.attributes,\n      priorPeriodAttributes = _ref.priorPeriodAttributes,\n      mpdType = _ref.mpdType; // Summary of period start time calculation from DASH spec section 5.3.2.1\n  //\n  // A period's start is the first period's start + time elapsed after playing all\n  // prior periods to this one. Periods continue one after the other in time (without\n  // gaps) until the end of the presentation.\n  //\n  // The value of Period@start should be:\n  // 1. if Period@start is present: value of Period@start\n  // 2. if previous period exists and it has @duration: previous Period@start +\n  //    previous Period@duration\n  // 3. if this is first period and MPD@type is 'static': 0\n  // 4. in all other cases, consider the period an \"early available period\" (note: not\n  //    currently supported)\n  // (1)\n\n  if (typeof attributes.start === 'number') {\n    return attributes.start;\n  } // (2)\n\n\n  if (priorPeriodAttributes && typeof priorPeriodAttributes.start === 'number' && typeof priorPeriodAttributes.duration === 'number') {\n    return priorPeriodAttributes.start + priorPeriodAttributes.duration;\n  } // (3)\n\n\n  if (!priorPeriodAttributes && mpdType === 'static') {\n    return 0;\n  } // (4)\n  // There is currently no logic for calculating the Period@start value if there is\n  // no Period@start or prior Period@start and Period@duration available. This is not made\n  // explicit by the DASH interop guidelines or the DASH spec, however, since there's\n  // nothing about any other resolution strategies, it's implied. Thus, this case should\n  // be considered an early available period, or error, and null should suffice for both\n  // of those cases.\n\n\n  return null;\n};\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\n\n\nvar inheritAttributes = function inheritAttributes(mpd, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$manifestUri = _options.manifestUri,\n      manifestUri = _options$manifestUri === void 0 ? '' : _options$manifestUri,\n      _options$NOW = _options.NOW,\n      NOW = _options$NOW === void 0 ? Date.now() : _options$NOW,\n      _options$clientOffset = _options.clientOffset,\n      clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;\n  var periodNodes = findChildren(mpd, 'Period');\n\n  if (!periodNodes.length) {\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n\n  var locations = findChildren(mpd, 'Location');\n  var mpdAttributes = parseAttributes(mpd);\n  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL')); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.\n\n  mpdAttributes.type = mpdAttributes.type || 'static';\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n\n  if (locations.length) {\n    mpdAttributes.locations = locations.map(getContent);\n  }\n\n  var periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to\n  // adding properties that require looking at prior periods is to parse attributes and add\n  // missing ones before toAdaptationSets is called. If more such properties are added, it\n  // may be better to refactor toAdaptationSets.\n\n  periodNodes.forEach(function (node, index) {\n    var attributes = parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary\n    // for this period.\n\n    var priorPeriod = periods[index - 1];\n    attributes.start = getPeriodStart({\n      attributes: attributes,\n      priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,\n      mpdType: mpdAttributes.type\n    });\n    periods.push({\n      node: node,\n      attributes: attributes\n    });\n  });\n  return {\n    locations: mpdAttributes.locations,\n    representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)))\n  };\n};\n\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n\n  var parser = new DOMParser();\n  var xml;\n  var mpd;\n\n  try {\n    xml = parser.parseFromString(manifestString, 'application/xml');\n    mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n  } catch (e) {// ie 11 throwsw on invalid xml\n  }\n\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n\n  return mpd;\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\n\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n\n  if (!UTCTimingNode) {\n    return null;\n  }\n\n  var attributes = parseAttributes(UTCTimingNode);\n\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n\n  return attributes;\n};\n\nvar VERSION = version;\n/*\n * Given a DASH manifest string and options, parses the DASH manifest into an object in the\n * form outputed by m3u8-parser and accepted by videojs/http-streaming.\n *\n * For live DASH manifests, if `previousManifest` is provided in options, then the newly\n * parsed DASH manifest will have its media sequence and discontinuity sequence values\n * updated to reflect its position relative to the prior manifest.\n *\n * @param {string} manifestString - the DASH manifest as a string\n * @param {options} [options] - any options\n *\n * @return {Object} the manifest object\n */\n\nvar parse = function parse(manifestString, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\n  var playlists = toPlaylists(parsedManifestInfo.representationInfo);\n  return toM3u8({\n    dashPlaylists: playlists,\n    locations: parsedManifestInfo.locations,\n    sidxMapping: options.sidxMapping,\n    previousManifest: options.previousManifest\n  });\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\n\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\n\nexport { VERSION, addSidxSegmentsToPlaylist$1 as addSidxSegmentsToPlaylist, generateSidxKey, inheritAttributes, parse, parseUTCTiming, stringToMpdXml, toM3u8, toPlaylists };","map":{"version":3,"sources":["/home/erwan/Documents/Frontend/reactjs/node_modules/mpd-parser/dist/mpd-parser.es.js"],"names":["resolveUrl","window","forEachMediaGroup","decodeB64ToUint8Array","DOMParser","version","isObject","obj","merge","_len","arguments","length","objects","Array","_key","reduce","result","source","Object","keys","forEach","key","isArray","concat","values","o","map","k","range","start","end","i","push","flatten","lists","x","y","from","list","findIndexes","l","a","e","findIndex","matchingFunction","union","keyFunction","acc","el","errors","INVALID_NUMBER_OF_PERIOD","DASH_EMPTY_MANIFEST","DASH_INVALID_XML","NO_BASE_URL","MISSING_SEGMENT_INFORMATION","SEGMENT_TIME_UNSPECIFIED","UNSUPPORTED_UTC_TIMING_SCHEME","urlTypeToSegment","_ref","_ref$baseUrl","baseUrl","_ref$source","_ref$range","_ref$indexRange","indexRange","segment","uri","resolvedUri","rangeStr","ranges","split","startRange","BigInt","parseInt","endRange","Number","MAX_SAFE_INTEGER","byterange","offset","byteRangeToString","parseEndNumber","endNumber","isNaN","segmentRange","static","_static","attributes","duration","_attributes$timescale","timescale","sourceDuration","periodDuration","segmentDuration","dynamic","NOW","clientOffset","availabilityStartTime","_attributes$timescale2","_attributes$periodSta","periodStart","_attributes$minimumUp","minimumUpdatePeriod","_attributes$timeShift","timeShiftBufferDepth","Infinity","now","periodStartWC","periodEndWC","segmentCount","Math","ceil","availableStart","floor","availableEnd","max","min","toSegments","number","_attributes$timescale3","_attributes$startNumb","startNumber","timeline","time","parseByDuration","type","_attributes$timescale4","_segmentRange$type","segments","index","sectionDuration","segmentsFromBase","_attributes$initializ","initialization","_attributes$indexRang","presentationTime","_attributes$number","Error","initSegment","sourceURL","segmentTimeInfo","addSidxSegmentsToPlaylist$1","addSidxSegmentsToPlaylist","playlist","sidx","sidxByteRange","sidxEnd","mediaReferences","references","filter","r","referenceType","endList","mediaSequence","startIndex","firstOffset","reference","size","referencedSize","subsegmentDuration","endIndex","SUPPORTED_MEDIA_TYPES","TIME_FUDGE","getUniqueTimelineStarts","timelineStarts","sort","b","findPlaylistWithName","playlists","name","NAME","getMediaGroupPlaylists","manifest","mediaGroupPlaylists","properties","group","label","updateMediaSequenceForPlaylist","_ref2","updateSequenceNumbers","_ref3","oldPlaylists","newPlaylists","discontinuitySequence","_ref4","oldPlaylist","firstNewSegment","oldMatchingSegmentIndex","oldSegment","abs","discontinuity","discontinuityStarts","unshift","oldMatchingSegment","positionManifestOnTimeline","_ref5","oldManifest","newManifest","generateSidxKey","mergeDiscontiguousPlaylists","mergedPlaylists","id","lang","_acc$name$segments","apply","contentProtection","sidxMapping","sidxKey","sidxMatch","addSidxSegmentsToPlaylists","formatAudioPlaylist","isAudioOnly","_attributes","BANDWIDTH","bandwidth","CODECS","codecs","targetDuration","AUDIO","SUBTITLES","formatVttPlaylist","_m3u8Attributes","m3u8Attributes","organizeAudioPlaylists","mainPlaylist","formattedPlaylists","role","value","language","roleLabel","autoselect","default","formatted","firstLabel","organizeVttPlaylists","organizeCaptionServices","captionServices","svcObj","svc","service","channel","instreamId","hasOwnProperty","aspectRatio","easyReader","formatVideoPlaylist","_attributes2","RESOLUTION","width","height","videoOnly","mimeType","contentType","audioOnly","vttOnly","_ref6","addMediaSequenceValues","_ref7","flattenMediaGroupPlaylists","mediaGroupObject","labelContents","toM3u8","_ref8","_mediaGroups","dashPlaylists","locations","_ref8$sidxMapping","previousManifest","_dashPlaylists$0$attr","suggestedPresentationDelay","videoPlaylists","audioPlaylists","vttPlaylists","captions","Boolean","allowCache","mediaGroups","VIDEO","organizedAudioGroup","organizedVttGroup","playlistTimelineStarts","_ref9","audio","subs","cc","getLiveRValue","parseByTimeline","segmentTimeline","_attributes$minimumUp2","_attributes$media","media","sIndex","S","d","repeat","segmentTime","t","count","nextS","indexOf","identifierPattern","identifierReplacement","match","identifier","format","join","constructTemplateUrl","url","replace","parseTemplateInfo","segmentsFromTemplate","templateValues","RepresentationID","Bandwidth","mapSegment","Time","presentationTimeOffset","SegmentURLToSegmentObject","segmentUrl","mediaRange","segmentsFromList","_attributes$segmentUr","segmentUrls","segmentUrlMap","segmentUrlObject","generateSegments","segmentInfo","segmentAttributes","segmentsFn","template","base","segmentsInfo","_segmentAttributes","_segmentAttributes$ti","toPlaylists","representations","findChildren","element","childNodes","tagName","getContent","textContent","trim","parseDuration","str","SECONDS_IN_YEAR","SECONDS_IN_MONTH","SECONDS_IN_DAY","SECONDS_IN_HOUR","SECONDS_IN_MIN","durationRegex","exec","_match$slice","slice","year","month","day","hour","minute","second","parseFloat","parseDate","dateRegex","test","Date","parse","parsers","mediaPresentationDuration","parsedValue","DEFAULT","parseAttributes","parseFn","keySystemsMap","buildBaseUrls","referenceUrls","baseUrlElements","baseUrlElement","getSegmentInformation","adaptationSet","segmentTemplate","segmentList","s","tag","segmentBase","segmentTimelineParentNode","segmentInitializationParentNode","segmentInitialization","inheritBaseUrls","adaptationSetAttributes","adaptationSetBaseUrls","adaptationSetSegmentInfo","representation","repBaseUrlElements","repBaseUrls","representationSegmentInfo","generateKeySystemInformation","contentProtectionNodes","node","keySystem","schemeIdUri","psshNode","pssh","psshBuffer","parseCaptionServiceMetadata","_value$split","_values","flags","undefined","_value$split2","_value$split2$","opts","opt","_opt$split","val","toRepresentations","periodAttributes","periodBaseUrls","periodSegmentInfo","roleAttributes","attrs","accessibility","labelVal","nodeValue","toAdaptationSets","mpdAttributes","mpdBaseUrls","period","adaptationSets","getPeriodStart","priorPeriodAttributes","mpdType","inheritAttributes","mpd","options","_options","_options$manifestUri","manifestUri","_options$NOW","_options$clientOffset","periodNodes","periods","priorPeriod","representationInfo","stringToMpdXml","manifestString","parser","xml","parseFromString","documentElement","getElementsByTagName","parseUTCTimingScheme","UTCTimingNode","method","VERSION","parsedManifestInfo","parseUTCTiming"],"mappings":"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","sourcesContent":["/*! @name mpd-parser @version 0.21.0 @license Apache-2.0 */\nimport resolveUrl from '@videojs/vhs-utils/es/resolve-url';\nimport window from 'global/window';\nimport { forEachMediaGroup } from '@videojs/vhs-utils/es/media-groups';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array';\nimport { DOMParser } from '@xmldom/xmldom';\n\nvar version = \"0.21.0\";\n\nvar isObject = function isObject(obj) {\n  return !!obj && typeof obj === 'object';\n};\n\nvar merge = function merge() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return objects.reduce(function (result, source) {\n    if (typeof source !== 'object') {\n      return result;\n    }\n\n    Object.keys(source).forEach(function (key) {\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\nvar values = function values(o) {\n  return Object.keys(o).map(function (k) {\n    return o[k];\n  });\n};\n\nvar range = function range(start, end) {\n  var result = [];\n\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\nvar flatten = function flatten(lists) {\n  return lists.reduce(function (x, y) {\n    return x.concat(y);\n  }, []);\n};\nvar from = function from(list) {\n  if (!list.length) {\n    return [];\n  }\n\n  var result = [];\n\n  for (var i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\nvar findIndexes = function findIndexes(l, key) {\n  return l.reduce(function (a, e, i) {\n    if (e[key]) {\n      a.push(i);\n    }\n\n    return a;\n  }, []);\n};\n/**\n * Returns the first index that satisfies the matching function, or -1 if not found.\n *\n * Only necessary because of IE11 support.\n *\n * @param {Array} list - the list to search through\n * @param {Function} matchingFunction - the matching function\n *\n * @return {number} the matching index or -1 if not found\n */\n\nvar findIndex = function findIndex(list, matchingFunction) {\n  for (var i = 0; i < list.length; i++) {\n    if (matchingFunction(list[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n/**\n * Returns a union of the included lists provided each element can be identified by a key.\n *\n * @param {Array} list - list of lists to get the union of\n * @param {Function} keyFunction - the function to use as a key for each element\n *\n * @return {Array} the union of the arrays\n */\n\nvar union = function union(lists, keyFunction) {\n  return values(lists.reduce(function (acc, list) {\n    list.forEach(function (el) {\n      acc[keyFunction(el)] = el;\n    });\n    return acc;\n  }, {}));\n};\n\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls,\n *   follows  RFC 2616, Clause 14.35.1\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\n\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\n  var _ref$baseUrl = _ref.baseUrl,\n      baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,\n      _ref$source = _ref.source,\n      source = _ref$source === void 0 ? '' : _ref$source,\n      _ref$range = _ref.range,\n      range = _ref$range === void 0 ? '' : _ref$range,\n      _ref$indexRange = _ref.indexRange,\n      indexRange = _ref$indexRange === void 0 ? '' : _ref$indexRange;\n  var segment = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n\n  if (range || indexRange) {\n    var rangeStr = range ? range : indexRange;\n    var ranges = rangeStr.split('-'); // default to parsing this as a BigInt if possible\n\n    var startRange = window.BigInt ? window.BigInt(ranges[0]) : parseInt(ranges[0], 10);\n    var endRange = window.BigInt ? window.BigInt(ranges[1]) : parseInt(ranges[1], 10); // convert back to a number if less than MAX_SAFE_INTEGER\n\n    if (startRange < Number.MAX_SAFE_INTEGER && typeof startRange === 'bigint') {\n      startRange = Number(startRange);\n    }\n\n    if (endRange < Number.MAX_SAFE_INTEGER && typeof endRange === 'bigint') {\n      endRange = Number(endRange);\n    }\n\n    var length;\n\n    if (typeof endRange === 'bigint' || typeof startRange === 'bigint') {\n      length = window.BigInt(endRange) - window.BigInt(startRange) + window.BigInt(1);\n    } else {\n      length = endRange - startRange + 1;\n    }\n\n    if (typeof length === 'bigint' && length < Number.MAX_SAFE_INTEGER) {\n      length = Number(length);\n    } // byterange should be inclusive according to\n    // RFC 2616, Clause 14.35.1\n\n\n    segment.byterange = {\n      length: length,\n      offset: startRange\n    };\n  }\n\n  return segment;\n};\nvar byteRangeToString = function byteRangeToString(byterange) {\n  // `endRange` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  var endRange;\n\n  if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\n    endRange = window.BigInt(byterange.offset) + window.BigInt(byterange.length) - window.BigInt(1);\n  } else {\n    endRange = byterange.offset + byterange.length - 1;\n  }\n\n  return byterange.offset + \"-\" + endRange;\n};\n\n/**\n * parse the end number attribue that can be a string\n * number, or undefined.\n *\n * @param {string|number|undefined} endNumber\n *        The end number attribute.\n *\n * @return {number|null}\n *          The result of parsing the end number.\n */\n\nvar parseEndNumber = function parseEndNumber(endNumber) {\n  if (endNumber && typeof endNumber !== 'number') {\n    endNumber = parseInt(endNumber, 10);\n  }\n\n  if (isNaN(endNumber)) {\n    return null;\n  }\n\n  return endNumber;\n};\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\n\n\nvar segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  static: function _static(attributes) {\n    var duration = attributes.duration,\n        _attributes$timescale = attributes.timescale,\n        timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n        sourceDuration = attributes.sourceDuration,\n        periodDuration = attributes.periodDuration;\n    var endNumber = parseEndNumber(attributes.endNumber);\n    var segmentDuration = duration / timescale;\n\n    if (typeof endNumber === 'number') {\n      return {\n        start: 0,\n        end: endNumber\n      };\n    }\n\n    if (typeof periodDuration === 'number') {\n      return {\n        start: 0,\n        end: periodDuration / segmentDuration\n      };\n    }\n\n    return {\n      start: 0,\n      end: sourceDuration / segmentDuration\n    };\n  },\n\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic: function dynamic(attributes) {\n    var NOW = attributes.NOW,\n        clientOffset = attributes.clientOffset,\n        availabilityStartTime = attributes.availabilityStartTime,\n        _attributes$timescale2 = attributes.timescale,\n        timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n        duration = attributes.duration,\n        _attributes$periodSta = attributes.periodStart,\n        periodStart = _attributes$periodSta === void 0 ? 0 : _attributes$periodSta,\n        _attributes$minimumUp = attributes.minimumUpdatePeriod,\n        minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp,\n        _attributes$timeShift = attributes.timeShiftBufferDepth,\n        timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;\n    var endNumber = parseEndNumber(attributes.endNumber); // clientOffset is passed in at the top level of mpd-parser and is an offset calculated\n    // after retrieving UTC server time.\n\n    var now = (NOW + clientOffset) / 1000; // WC stands for Wall Clock.\n    // Convert the period start time to EPOCH.\n\n    var periodStartWC = availabilityStartTime + periodStart; // Period end in EPOCH is manifest's retrieval time + time until next update.\n\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n    return {\n      start: Math.max(0, availableStart),\n      end: typeof endNumber === 'number' ? endNumber : Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\n\nvar toSegments = function toSegments(attributes) {\n  return function (number) {\n    var duration = attributes.duration,\n        _attributes$timescale3 = attributes.timescale,\n        timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3,\n        periodStart = attributes.periodStart,\n        _attributes$startNumb = attributes.startNumber,\n        startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;\n    return {\n      number: startNumber + number,\n      duration: duration / timescale,\n      timeline: periodStart,\n      time: number * duration\n    };\n  };\n};\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseByDuration = function parseByDuration(attributes) {\n  var type = attributes.type,\n      duration = attributes.duration,\n      _attributes$timescale4 = attributes.timescale,\n      timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4,\n      periodDuration = attributes.periodDuration,\n      sourceDuration = attributes.sourceDuration;\n\n  var _segmentRange$type = segmentRange[type](attributes),\n      start = _segmentRange$type.start,\n      end = _segmentRange$type.end;\n\n  var segments = range(start, end).map(toSegments(attributes));\n\n  if (type === 'static') {\n    var index = segments.length - 1; // section is either a period or the full source\n\n    var sectionDuration = typeof periodDuration === 'number' ? periodDuration : sourceDuration; // final segment may be less than full segment duration\n\n    segments[index].duration = sectionDuration - duration / timescale * index;\n  }\n\n  return segments;\n};\n\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\n\nvar segmentsFromBase = function segmentsFromBase(attributes) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$indexRang = attributes.indexRange,\n      indexRange = _attributes$indexRang === void 0 ? '' : _attributes$indexRang,\n      periodStart = attributes.periodStart,\n      presentationTime = attributes.presentationTime,\n      _attributes$number = attributes.number,\n      number = _attributes$number === void 0 ? 0 : _attributes$number,\n      duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: baseUrl,\n    indexRange: indexRange\n  });\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n\n  if (duration) {\n    var segmentTimeInfo = parseByDuration(attributes);\n\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration;\n    segment.timeline = periodStart;\n  } // If presentation time is provided, these segments are being generated by SIDX\n  // references, and should use the time provided. For the general case of SegmentBase,\n  // there should only be one segment in the period, so its presentation time is the same\n  // as its period start.\n\n\n  segment.presentationTime = presentationTime || periodStart;\n  segment.number = number;\n  return [segment];\n};\n/**\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\n * according to the sidx information given.\n *\n * playlist.sidx has metadadata about the sidx where-as the sidx param\n * is the parsed sidx box itself.\n *\n * @param {Object} playlist the playlist to update the sidx information for\n * @param {Object} sidx the parsed sidx box\n * @return {Object} the playlist object with the updated sidx information\n */\n\nvar addSidxSegmentsToPlaylist$1 = function addSidxSegmentsToPlaylist(playlist, sidx, baseUrl) {\n  // Retain init segment information\n  var initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing\n\n  var sourceDuration = playlist.sidx.duration; // Retain source timeline\n\n  var timeline = playlist.timeline || 0;\n  var sidxByteRange = playlist.sidx.byterange;\n  var sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n\n  var timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n\n  var mediaReferences = sidx.references.filter(function (r) {\n    return r.referenceType !== 1;\n  });\n  var segments = [];\n  var type = playlist.endList ? 'static' : 'dynamic';\n  var periodStart = playlist.sidx.timeline;\n  var presentationTime = periodStart;\n  var number = playlist.mediaSequence || 0; // firstOffset is the offset from the end of the sidx box\n\n  var startIndex; // eslint-disable-next-line\n\n  if (typeof sidx.firstOffset === 'bigint') {\n    startIndex = window.BigInt(sidxEnd) + sidx.firstOffset;\n  } else {\n    startIndex = sidxEnd + sidx.firstOffset;\n  }\n\n  for (var i = 0; i < mediaReferences.length; i++) {\n    var reference = sidx.references[i]; // size of the referenced (sub)segment\n\n    var size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n    // this will be converted to seconds when generating segments\n\n    var duration = reference.subsegmentDuration; // should be an inclusive range\n\n    var endIndex = void 0; // eslint-disable-next-line\n\n    if (typeof startIndex === 'bigint') {\n      endIndex = startIndex + window.BigInt(size) - window.BigInt(1);\n    } else {\n      endIndex = startIndex + size - 1;\n    }\n\n    var indexRange = startIndex + \"-\" + endIndex;\n    var attributes = {\n      baseUrl: baseUrl,\n      timescale: timescale,\n      timeline: timeline,\n      periodStart: periodStart,\n      presentationTime: presentationTime,\n      number: number,\n      duration: duration,\n      sourceDuration: sourceDuration,\n      indexRange: indexRange,\n      type: type\n    };\n    var segment = segmentsFromBase(attributes)[0];\n\n    if (initSegment) {\n      segment.map = initSegment;\n    }\n\n    segments.push(segment);\n\n    if (typeof startIndex === 'bigint') {\n      startIndex += window.BigInt(size);\n    } else {\n      startIndex += size;\n    }\n\n    presentationTime += duration / timescale;\n    number++;\n  }\n\n  playlist.segments = segments;\n  return playlist;\n};\n\nvar SUPPORTED_MEDIA_TYPES = ['AUDIO', 'SUBTITLES']; // allow one 60fps frame as leniency (arbitrarily chosen)\n\nvar TIME_FUDGE = 1 / 60;\n/**\n * Given a list of timelineStarts, combines, dedupes, and sorts them.\n *\n * @param {TimelineStart[]} timelineStarts - list of timeline starts\n *\n * @return {TimelineStart[]} the combined and deduped timeline starts\n */\n\nvar getUniqueTimelineStarts = function getUniqueTimelineStarts(timelineStarts) {\n  return union(timelineStarts, function (_ref) {\n    var timeline = _ref.timeline;\n    return timeline;\n  }).sort(function (a, b) {\n    return a.timeline > b.timeline ? 1 : -1;\n  });\n};\n/**\n * Finds the playlist with the matching NAME attribute.\n *\n * @param {Array} playlists - playlists to search through\n * @param {string} name - the NAME attribute to search for\n *\n * @return {Object|null} the matching playlist object, or null\n */\n\nvar findPlaylistWithName = function findPlaylistWithName(playlists, name) {\n  for (var i = 0; i < playlists.length; i++) {\n    if (playlists[i].attributes.NAME === name) {\n      return playlists[i];\n    }\n  }\n\n  return null;\n};\n/**\n * Gets a flattened array of media group playlists.\n *\n * @param {Object} manifest - the main manifest object\n *\n * @return {Array} the media group playlists\n */\n\nvar getMediaGroupPlaylists = function getMediaGroupPlaylists(manifest) {\n  var mediaGroupPlaylists = [];\n  forEachMediaGroup(manifest, SUPPORTED_MEDIA_TYPES, function (properties, type, group, label) {\n    mediaGroupPlaylists = mediaGroupPlaylists.concat(properties.playlists || []);\n  });\n  return mediaGroupPlaylists;\n};\n/**\n * Updates the playlist's media sequence numbers.\n *\n * @param {Object} config - options object\n * @param {Object} config.playlist - the playlist to update\n * @param {number} config.mediaSequence - the mediaSequence number to start with\n */\n\nvar updateMediaSequenceForPlaylist = function updateMediaSequenceForPlaylist(_ref2) {\n  var playlist = _ref2.playlist,\n      mediaSequence = _ref2.mediaSequence;\n  playlist.mediaSequence = mediaSequence;\n  playlist.segments.forEach(function (segment, index) {\n    segment.number = playlist.mediaSequence + index;\n  });\n};\n/**\n * Updates the media and discontinuity sequence numbers of newPlaylists given oldPlaylists\n * and a complete list of timeline starts.\n *\n * If no matching playlist is found, only the discontinuity sequence number of the playlist\n * will be updated.\n *\n * Since early available timelines are not supported, at least one segment must be present.\n *\n * @param {Object} config - options object\n * @param {Object[]} oldPlaylists - the old playlists to use as a reference\n * @param {Object[]} newPlaylists - the new playlists to update\n * @param {Object} timelineStarts - all timelineStarts seen in the stream to this point\n */\n\nvar updateSequenceNumbers = function updateSequenceNumbers(_ref3) {\n  var oldPlaylists = _ref3.oldPlaylists,\n      newPlaylists = _ref3.newPlaylists,\n      timelineStarts = _ref3.timelineStarts;\n  newPlaylists.forEach(function (playlist) {\n    playlist.discontinuitySequence = findIndex(timelineStarts, function (_ref4) {\n      var timeline = _ref4.timeline;\n      return timeline === playlist.timeline;\n    }); // Playlists NAMEs come from DASH Representation IDs, which are mandatory\n    // (see ISO_23009-1-2012 5.3.5.2).\n    //\n    // If the same Representation existed in a prior Period, it will retain the same NAME.\n\n    var oldPlaylist = findPlaylistWithName(oldPlaylists, playlist.attributes.NAME);\n\n    if (!oldPlaylist) {\n      // Since this is a new playlist, the media sequence values can start from 0 without\n      // consequence.\n      return;\n    } // TODO better support for live SIDX\n    //\n    // As of this writing, mpd-parser does not support multiperiod SIDX (in live or VOD).\n    // This is evident by a playlist only having a single SIDX reference. In a multiperiod\n    // playlist there would need to be multiple SIDX references. In addition, live SIDX is\n    // not supported when the SIDX properties change on refreshes.\n    //\n    // In the future, if support needs to be added, the merging logic here can be called\n    // after SIDX references are resolved. For now, exit early to prevent exceptions being\n    // thrown due to undefined references.\n\n\n    if (playlist.sidx) {\n      return;\n    } // Since we don't yet support early available timelines, we don't need to support\n    // playlists with no segments.\n\n\n    var firstNewSegment = playlist.segments[0];\n    var oldMatchingSegmentIndex = findIndex(oldPlaylist.segments, function (oldSegment) {\n      return Math.abs(oldSegment.presentationTime - firstNewSegment.presentationTime) < TIME_FUDGE;\n    }); // No matching segment from the old playlist means the entire playlist was refreshed.\n    // In this case the media sequence should account for this update, and the new segments\n    // should be marked as discontinuous from the prior content, since the last prior\n    // timeline was removed.\n\n    if (oldMatchingSegmentIndex === -1) {\n      updateMediaSequenceForPlaylist({\n        playlist: playlist,\n        mediaSequence: oldPlaylist.mediaSequence + oldPlaylist.segments.length\n      });\n      playlist.segments[0].discontinuity = true;\n      playlist.discontinuityStarts.unshift(0); // No matching segment does not necessarily mean there's missing content.\n      //\n      // If the new playlist's timeline is the same as the last seen segment's timeline,\n      // then a discontinuity can be added to identify that there's potentially missing\n      // content. If there's no missing content, the discontinuity should still be rather\n      // harmless. It's possible that if segment durations are accurate enough, that the\n      // existence of a gap can be determined using the presentation times and durations,\n      // but if the segment timing info is off, it may introduce more problems than simply\n      // adding the discontinuity.\n      //\n      // If the new playlist's timeline is different from the last seen segment's timeline,\n      // then a discontinuity can be added to identify that this is the first seen segment\n      // of a new timeline. However, the logic at the start of this function that\n      // determined the disconinuity sequence by timeline index is now off by one (the\n      // discontinuity of the newest timeline hasn't yet fallen off the manifest...since\n      // we added it), so the disconinuity sequence must be decremented.\n      //\n      // A period may also have a duration of zero, so the case of no segments is handled\n      // here even though we don't yet support early available periods.\n\n      if (!oldPlaylist.segments.length && playlist.timeline > oldPlaylist.timeline || oldPlaylist.segments.length && playlist.timeline > oldPlaylist.segments[oldPlaylist.segments.length - 1].timeline) {\n        playlist.discontinuitySequence--;\n      }\n\n      return;\n    } // If the first segment matched with a prior segment on a discontinuity (it's matching\n    // on the first segment of a period), then the discontinuitySequence shouldn't be the\n    // timeline's matching one, but instead should be the one prior, and the first segment\n    // of the new manifest should be marked with a discontinuity.\n    //\n    // The reason for this special case is that discontinuity sequence shows how many\n    // discontinuities have fallen off of the playlist, and discontinuities are marked on\n    // the first segment of a new \"timeline.\" Because of this, while DASH will retain that\n    // Period while the \"timeline\" exists, HLS keeps track of it via the discontinuity\n    // sequence, and that first segment is an indicator, but can be removed before that\n    // timeline is gone.\n\n\n    var oldMatchingSegment = oldPlaylist.segments[oldMatchingSegmentIndex];\n\n    if (oldMatchingSegment.discontinuity && !firstNewSegment.discontinuity) {\n      firstNewSegment.discontinuity = true;\n      playlist.discontinuityStarts.unshift(0);\n      playlist.discontinuitySequence--;\n    }\n\n    updateMediaSequenceForPlaylist({\n      playlist: playlist,\n      mediaSequence: oldPlaylist.segments[oldMatchingSegmentIndex].number\n    });\n  });\n};\n/**\n * Given an old parsed manifest object and a new parsed manifest object, updates the\n * sequence and timing values within the new manifest to ensure that it lines up with the\n * old.\n *\n * @param {Array} oldManifest - the old main manifest object\n * @param {Array} newManifest - the new main manifest object\n *\n * @return {Object} the updated new manifest object\n */\n\nvar positionManifestOnTimeline = function positionManifestOnTimeline(_ref5) {\n  var oldManifest = _ref5.oldManifest,\n      newManifest = _ref5.newManifest;\n  // Starting from v4.1.2 of the IOP, section 4.4.3.3 states:\n  //\n  // \"MPD@availabilityStartTime and Period@start shall not be changed over MPD updates.\"\n  //\n  // This was added from https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160\n  //\n  // Because of this change, and the difficulty of supporting periods with changing start\n  // times, periods with changing start times are not supported. This makes the logic much\n  // simpler, since periods with the same start time can be considerred the same period\n  // across refreshes.\n  //\n  // To give an example as to the difficulty of handling periods where the start time may\n  // change, if a single period manifest is refreshed with another manifest with a single\n  // period, and both the start and end times are increased, then the only way to determine\n  // if it's a new period or an old one that has changed is to look through the segments of\n  // each playlist and determine the presentation time bounds to find a match. In addition,\n  // if the period start changed to exceed the old period end, then there would be no\n  // match, and it would not be possible to determine whether the refreshed period is a new\n  // one or the old one.\n  var oldPlaylists = oldManifest.playlists.concat(getMediaGroupPlaylists(oldManifest));\n  var newPlaylists = newManifest.playlists.concat(getMediaGroupPlaylists(newManifest)); // Save all seen timelineStarts to the new manifest. Although this potentially means that\n  // there's a \"memory leak\" in that it will never stop growing, in reality, only a couple\n  // of properties are saved for each seen Period. Even long running live streams won't\n  // generate too many Periods, unless the stream is watched for decades. In the future,\n  // this can be optimized by mapping to discontinuity sequence numbers for each timeline,\n  // but it may not become an issue, and the additional info can be useful for debugging.\n\n  newManifest.timelineStarts = getUniqueTimelineStarts([oldManifest.timelineStarts, newManifest.timelineStarts]);\n  updateSequenceNumbers({\n    oldPlaylists: oldPlaylists,\n    newPlaylists: newPlaylists,\n    timelineStarts: newManifest.timelineStarts\n  });\n  return newManifest;\n};\n\nvar generateSidxKey = function generateSidxKey(sidx) {\n  return sidx && sidx.uri + '-' + byteRangeToString(sidx.byterange);\n};\n\nvar mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {\n  var mergedPlaylists = values(playlists.reduce(function (acc, playlist) {\n    // assuming playlist IDs are the same across periods\n    // TODO: handle multiperiod where representation sets are not the same\n    // across periods\n    var name = playlist.attributes.id + (playlist.attributes.lang || '');\n\n    if (!acc[name]) {\n      // First Period\n      acc[name] = playlist;\n      acc[name].attributes.timelineStarts = [];\n    } else {\n      // Subsequent Periods\n      if (playlist.segments) {\n        var _acc$name$segments;\n\n        // first segment of subsequent periods signal a discontinuity\n        if (playlist.segments[0]) {\n          playlist.segments[0].discontinuity = true;\n        }\n\n        (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments);\n      } // bubble up contentProtection, this assumes all DRM content\n      // has the same contentProtection\n\n\n      if (playlist.attributes.contentProtection) {\n        acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n      }\n    }\n\n    acc[name].attributes.timelineStarts.push({\n      // Although they represent the same number, it's important to have both to make it\n      // compatible with HLS potentially having a similar attribute.\n      start: playlist.attributes.periodStart,\n      timeline: playlist.attributes.periodStart\n    });\n    return acc;\n  }, {}));\n  return mergedPlaylists.map(function (playlist) {\n    playlist.discontinuityStarts = findIndexes(playlist.segments || [], 'discontinuity');\n    return playlist;\n  });\n};\n\nvar addSidxSegmentsToPlaylist = function addSidxSegmentsToPlaylist(playlist, sidxMapping) {\n  var sidxKey = generateSidxKey(playlist.sidx);\n  var sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n\n  if (sidxMatch) {\n    addSidxSegmentsToPlaylist$1(playlist, sidxMatch, playlist.sidx.resolvedUri);\n  }\n\n  return playlist;\n};\nvar addSidxSegmentsToPlaylists = function addSidxSegmentsToPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (!Object.keys(sidxMapping).length) {\n    return playlists;\n  }\n\n  for (var i in playlists) {\n    playlists[i] = addSidxSegmentsToPlaylist(playlists[i], sidxMapping);\n  }\n\n  return playlists;\n};\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref, isAudioOnly) {\n  var _attributes;\n\n  var attributes = _ref.attributes,\n      segments = _ref.segments,\n      sidx = _ref.sidx,\n      mediaSequence = _ref.mediaSequence,\n      discontinuitySequence = _ref.discontinuitySequence,\n      discontinuityStarts = _ref.discontinuityStarts;\n  var playlist = {\n    attributes: (_attributes = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs\n    }, _attributes['PROGRAM-ID'] = 1, _attributes),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    discontinuitySequence: discontinuitySequence,\n    discontinuityStarts: discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    mediaSequence: mediaSequence,\n    segments: segments\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  if (isAudioOnly) {\n    playlist.attributes.AUDIO = 'audio';\n    playlist.attributes.SUBTITLES = 'subs';\n  }\n\n  return playlist;\n};\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\n  var _m3u8Attributes;\n\n  var attributes = _ref2.attributes,\n      segments = _ref2.segments,\n      mediaSequence = _ref2.mediaSequence,\n      discontinuityStarts = _ref2.discontinuityStarts,\n      discontinuitySequence = _ref2.discontinuitySequence;\n\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodStart,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }]; // targetDuration should be the same duration as the only segment\n\n    attributes.duration = attributes.sourceDuration;\n  }\n\n  var m3u8Attributes = (_m3u8Attributes = {\n    NAME: attributes.id,\n    BANDWIDTH: attributes.bandwidth\n  }, _m3u8Attributes['PROGRAM-ID'] = 1, _m3u8Attributes);\n\n  if (attributes.codecs) {\n    m3u8Attributes.CODECS = attributes.codecs;\n  }\n\n  return {\n    attributes: m3u8Attributes,\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    timelineStarts: attributes.timelineStarts,\n    discontinuityStarts: discontinuityStarts,\n    discontinuitySequence: discontinuitySequence,\n    mediaSequence: mediaSequence,\n    segments: segments\n  };\n};\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists, sidxMapping, isAudioOnly) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (isAudioOnly === void 0) {\n    isAudioOnly = false;\n  }\n\n  var mainPlaylist;\n  var formattedPlaylists = playlists.reduce(function (a, playlist) {\n    var role = playlist.attributes.role && playlist.attributes.role.value || '';\n    var language = playlist.attributes.lang || '';\n    var label = playlist.attributes.label || 'main';\n\n    if (language && !playlist.attributes.label) {\n      var roleLabel = role ? \" (\" + role + \")\" : '';\n      label = \"\" + playlist.attributes.lang + roleLabel;\n    }\n\n    if (!a[label]) {\n      a[label] = {\n        language: language,\n        autoselect: true,\n        default: role === 'main',\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    var formatted = addSidxSegmentsToPlaylist(formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);\n    a[label].playlists.push(formatted);\n\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\n      mainPlaylist = playlist;\n      mainPlaylist.default = true;\n    }\n\n    return a;\n  }, {}); // if no playlists have role \"main\", mark the first as main\n\n  if (!mainPlaylist) {\n    var firstLabel = Object.keys(formattedPlaylists)[0];\n    formattedPlaylists[firstLabel].default = true;\n  }\n\n  return formattedPlaylists;\n};\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  return playlists.reduce(function (a, playlist) {\n    var label = playlist.attributes.lang || 'text';\n\n    if (!a[label]) {\n      a[label] = {\n        language: label,\n        default: false,\n        autoselect: false,\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    a[label].playlists.push(addSidxSegmentsToPlaylist(formatVttPlaylist(playlist), sidxMapping));\n    return a;\n  }, {});\n};\n\nvar organizeCaptionServices = function organizeCaptionServices(captionServices) {\n  return captionServices.reduce(function (svcObj, svc) {\n    if (!svc) {\n      return svcObj;\n    }\n\n    svc.forEach(function (service) {\n      var channel = service.channel,\n          language = service.language;\n      svcObj[language] = {\n        autoselect: false,\n        default: false,\n        instreamId: channel,\n        language: language\n      };\n\n      if (service.hasOwnProperty('aspectRatio')) {\n        svcObj[language].aspectRatio = service.aspectRatio;\n      }\n\n      if (service.hasOwnProperty('easyReader')) {\n        svcObj[language].easyReader = service.easyReader;\n      }\n\n      if (service.hasOwnProperty('3D')) {\n        svcObj[language]['3D'] = service['3D'];\n      }\n    });\n    return svcObj;\n  }, {});\n};\n\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\n  var _attributes2;\n\n  var attributes = _ref3.attributes,\n      segments = _ref3.segments,\n      sidx = _ref3.sidx,\n      discontinuityStarts = _ref3.discontinuityStarts;\n  var playlist = {\n    attributes: (_attributes2 = {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    discontinuityStarts: discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    segments: segments\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  return playlist;\n};\n\nvar videoOnly = function videoOnly(_ref4) {\n  var attributes = _ref4.attributes;\n  return attributes.mimeType === 'video/mp4' || attributes.mimeType === 'video/webm' || attributes.contentType === 'video';\n};\n\nvar audioOnly = function audioOnly(_ref5) {\n  var attributes = _ref5.attributes;\n  return attributes.mimeType === 'audio/mp4' || attributes.mimeType === 'audio/webm' || attributes.contentType === 'audio';\n};\n\nvar vttOnly = function vttOnly(_ref6) {\n  var attributes = _ref6.attributes;\n  return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n};\n/**\n * Contains start and timeline properties denoting a timeline start. For DASH, these will\n * be the same number.\n *\n * @typedef {Object} TimelineStart\n * @property {number} start - the start time of the timeline\n * @property {number} timeline - the timeline number\n */\n\n/**\n * Adds appropriate media and discontinuity sequence values to the segments and playlists.\n *\n * Throughout mpd-parser, the `number` attribute is used in relation to `startNumber`, a\n * DASH specific attribute used in constructing segment URI's from templates. However, from\n * an HLS perspective, the `number` attribute on a segment would be its `mediaSequence`\n * value, which should start at the original media sequence value (or 0) and increment by 1\n * for each segment thereafter. Since DASH's `startNumber` values are independent per\n * period, it doesn't make sense to use it for `number`. Instead, assume everything starts\n * from a 0 mediaSequence value and increment from there.\n *\n * Note that VHS currently doesn't use the `number` property, but it can be helpful for\n * debugging and making sense of the manifest.\n *\n * For live playlists, to account for values increasing in manifests when periods are\n * removed on refreshes, merging logic should be used to update the numbers to their\n * appropriate values (to ensure they're sequential and increasing).\n *\n * @param {Object[]} playlists - the playlists to update\n * @param {TimelineStart[]} timelineStarts - the timeline starts for the manifest\n */\n\n\nvar addMediaSequenceValues = function addMediaSequenceValues(playlists, timelineStarts) {\n  // increment all segments sequentially\n  playlists.forEach(function (playlist) {\n    playlist.mediaSequence = 0;\n    playlist.discontinuitySequence = findIndex(timelineStarts, function (_ref7) {\n      var timeline = _ref7.timeline;\n      return timeline === playlist.timeline;\n    });\n\n    if (!playlist.segments) {\n      return;\n    }\n\n    playlist.segments.forEach(function (segment, index) {\n      segment.number = index;\n    });\n  });\n};\n/**\n * Given a media group object, flattens all playlists within the media group into a single\n * array.\n *\n * @param {Object} mediaGroupObject - the media group object\n *\n * @return {Object[]}\n *         The media group playlists\n */\n\nvar flattenMediaGroupPlaylists = function flattenMediaGroupPlaylists(mediaGroupObject) {\n  if (!mediaGroupObject) {\n    return [];\n  }\n\n  return Object.keys(mediaGroupObject).reduce(function (acc, label) {\n    var labelContents = mediaGroupObject[label];\n    return acc.concat(labelContents.playlists);\n  }, []);\n};\nvar toM3u8 = function toM3u8(_ref8) {\n  var _mediaGroups;\n\n  var dashPlaylists = _ref8.dashPlaylists,\n      locations = _ref8.locations,\n      _ref8$sidxMapping = _ref8.sidxMapping,\n      sidxMapping = _ref8$sidxMapping === void 0 ? {} : _ref8$sidxMapping,\n      previousManifest = _ref8.previousManifest;\n\n  if (!dashPlaylists.length) {\n    return {};\n  } // grab all main manifest attributes\n\n\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\n      duration = _dashPlaylists$0$attr.sourceDuration,\n      type = _dashPlaylists$0$attr.type,\n      suggestedPresentationDelay = _dashPlaylists$0$attr.suggestedPresentationDelay,\n      minimumUpdatePeriod = _dashPlaylists$0$attr.minimumUpdatePeriod;\n  var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n  var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n  var vttPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(vttOnly));\n  var captions = dashPlaylists.map(function (playlist) {\n    return playlist.attributes.captionServices;\n  }).filter(Boolean);\n  var manifest = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: (_mediaGroups = {\n      AUDIO: {},\n      VIDEO: {}\n    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\n    uri: '',\n    duration: duration,\n    playlists: addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)\n  };\n\n  if (minimumUpdatePeriod >= 0) {\n    manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\n  }\n\n  if (locations) {\n    manifest.locations = locations;\n  }\n\n  if (type === 'dynamic') {\n    manifest.suggestedPresentationDelay = suggestedPresentationDelay;\n  }\n\n  var isAudioOnly = manifest.playlists.length === 0;\n  var organizedAudioGroup = audioPlaylists.length ? organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly) : null;\n  var organizedVttGroup = vttPlaylists.length ? organizeVttPlaylists(vttPlaylists, sidxMapping) : null;\n  var formattedPlaylists = videoPlaylists.concat(flattenMediaGroupPlaylists(organizedAudioGroup), flattenMediaGroupPlaylists(organizedVttGroup));\n  var playlistTimelineStarts = formattedPlaylists.map(function (_ref9) {\n    var timelineStarts = _ref9.timelineStarts;\n    return timelineStarts;\n  });\n  manifest.timelineStarts = getUniqueTimelineStarts(playlistTimelineStarts);\n  addMediaSequenceValues(formattedPlaylists, manifest.timelineStarts);\n\n  if (organizedAudioGroup) {\n    manifest.mediaGroups.AUDIO.audio = organizedAudioGroup;\n  }\n\n  if (organizedVttGroup) {\n    manifest.mediaGroups.SUBTITLES.subs = organizedVttGroup;\n  }\n\n  if (captions.length) {\n    manifest.mediaGroups['CLOSED-CAPTIONS'].cc = organizeCaptionServices(captions);\n  }\n\n  if (previousManifest) {\n    return positionManifestOnTimeline({\n      oldManifest: previousManifest,\n      newManifest: manifest\n    });\n  }\n\n  return manifest;\n};\n\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\n  var NOW = attributes.NOW,\n      clientOffset = attributes.clientOffset,\n      availabilityStartTime = attributes.availabilityStartTime,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n      _attributes$periodSta = attributes.periodStart,\n      periodStart = _attributes$periodSta === void 0 ? 0 : _attributes$periodSta,\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;\n  var now = (NOW + clientOffset) / 1000;\n  var periodStartWC = availabilityStartTime + periodStart;\n  var periodEndWC = now + minimumUpdatePeriod;\n  var periodDuration = periodEndWC - periodStartWC;\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\n\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n  var type = attributes.type,\n      _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2,\n      _attributes$media = attributes.media,\n      media = _attributes$media === void 0 ? '' : _attributes$media,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale2 = attributes.timescale,\n      timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n      _attributes$startNumb = attributes.startNumber,\n      startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb,\n      timeline = attributes.periodStart;\n  var segments = [];\n  var time = -1;\n\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    var S = segmentTimeline[sIndex];\n    var duration = S.d;\n    var repeat = S.r || 0;\n    var segmentTime = S.t || 0;\n\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n      time = segmentTime;\n    }\n\n    var count = void 0;\n\n    if (repeat < 0) {\n      var nextS = sIndex + 1;\n\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n\n    var end = startNumber + segments.length + count;\n    var number = startNumber + segments.length;\n\n    while (number < end) {\n      segments.push({\n        number: number,\n        duration: duration / timescale,\n        time: time,\n        timeline: timeline\n      });\n      time += duration;\n      number++;\n    }\n  }\n\n  return segments;\n};\n\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\n\nvar identifierReplacement = function identifierReplacement(values) {\n  return function (match, identifier, format, width) {\n    if (match === '$$') {\n      // escape sequence\n      return '$';\n    }\n\n    if (typeof values[identifier] === 'undefined') {\n      return match;\n    }\n\n    var value = '' + values[identifier];\n\n    if (identifier === 'RepresentationID') {\n      // Format tag shall not be present with RepresentationID\n      return value;\n    }\n\n    if (!format) {\n      width = 1;\n    } else {\n      width = parseInt(width, 10);\n    }\n\n    if (value.length >= width) {\n      return value;\n    }\n\n    return \"\" + new Array(width - value.length + 1).join('0') + value;\n  };\n};\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\n\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\n  return url.replace(identifierPattern, identifierReplacement(values));\n};\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodStart\n    }];\n  }\n\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n\n  return parseByTimeline(attributes, segmentTimeline);\n};\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\n\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n  var templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n  var _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {\n    sourceURL: '',\n    range: ''\n  } : _attributes$initializ;\n  var mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\n  return segments.map(function (segment) {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n    var uri = constructTemplateUrl(attributes.media || '', templateValues); // See DASH spec section 5.3.9.2.2\n    // - if timescale isn't present on any level, default to 1.\n\n    var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n    var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n    var presentationTime = // Even if the @t attribute is not specified for the segment, segment.time is\n    // calculated in mpd-parser prior to this, so it's assumed to be available.\n    attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;\n    var map = {\n      uri: uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number,\n      presentationTime: presentationTime\n    };\n    return map;\n  });\n};\n\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\n\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n  segment.map = initSegment;\n  return segment;\n};\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\n\n\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n  var duration = attributes.duration,\n      _attributes$segmentUr = attributes.segmentUrls,\n      segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr,\n      periodStart = attributes.periodStart; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n  });\n  var segmentTimeInfo;\n\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\n    if (segmentUrlMap[index]) {\n      var segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2\n      // - if timescale isn't present on any level, default to 1.\n\n      var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n      var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;\n      return segment;\n    } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n\n  }).filter(function (segment) {\n    return segment;\n  });\n  return segments;\n};\n\nvar generateSegments = function generateSegments(_ref) {\n  var attributes = _ref.attributes,\n      segmentInfo = _ref.segmentInfo;\n  var segmentAttributes;\n  var segmentsFn;\n\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n\n  var segmentsInfo = {\n    attributes: attributes\n  };\n\n  if (!segmentsFn) {\n    return segmentsInfo;\n  }\n\n  var segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n\n  if (segmentAttributes.duration) {\n    var _segmentAttributes = segmentAttributes,\n        duration = _segmentAttributes.duration,\n        _segmentAttributes$ti = _segmentAttributes.timescale,\n        timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n\n  segmentsInfo.attributes = segmentAttributes;\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n\n  if (segmentInfo.base && segmentAttributes.indexRange) {\n    segmentsInfo.sidx = segments[0];\n    segmentsInfo.segments = [];\n  }\n\n  return segmentsInfo;\n};\nvar toPlaylists = function toPlaylists(representations) {\n  return representations.map(generateSegments);\n};\n\nvar findChildren = function findChildren(element, name) {\n  return from(element.childNodes).filter(function (_ref) {\n    var tagName = _ref.tagName;\n    return tagName === name;\n  });\n};\nvar getContent = function getContent(element) {\n  return element.textContent.trim();\n};\n\nvar parseDuration = function parseDuration(str) {\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  var SECONDS_IN_DAY = 24 * 60 * 60;\n  var SECONDS_IN_HOUR = 60 * 60;\n  var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  var match = durationRegex.exec(str);\n\n  if (!match) {\n    return 0;\n  }\n\n  var _match$slice = match.slice(1),\n      year = _match$slice[0],\n      month = _match$slice[1],\n      day = _match$slice[2],\n      hour = _match$slice[3],\n      minute = _match$slice[4],\n      second = _match$slice[5];\n\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\nvar parseDate = function parseDate(str) {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n\n  return Date.parse(str);\n};\n\nvar parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime: function availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the suggested presentation delay. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  suggestedPresentationDelay: function suggestedPresentationDelay(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   *\n   * @return {string}\n   *         The type as a string\n   */\n  type: function type(value) {\n    return value;\n  },\n\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start: function start(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width: function width(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height: function height(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth: function bandwidth(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber: function startNumber(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed timescale\n   */\n  timescale: function timescale(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the presentationTimeOffset.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTimeOffset\n   */\n  presentationTimeOffset: function presentationTimeOffset(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration: function duration(value) {\n    var parsedValue = parseInt(value, 10);\n\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n\n    return parsedValue;\n  },\n\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d: function d(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t: function t(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r: function r(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT: function DEFAULT(value) {\n    return value;\n  }\n};\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\n\nvar parseAttributes = function parseAttributes(el) {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n\n  return from(el.attributes).reduce(function (a, e) {\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\n    a[e.name] = parseFn(e.value);\n    return a;\n  }, {});\n};\n\nvar keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'\n};\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {string[]} referenceUrls\n *        List of reference urls to resolve to\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {string[]}\n *         List of resolved urls\n */\n\nvar buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\n  if (!baseUrlElements.length) {\n    return referenceUrls;\n  }\n\n  return flatten(referenceUrls.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      return resolveUrl(reference, getContent(baseUrlElement));\n    });\n  }));\n};\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} segmentTimeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\n\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\n    return merge({\n      tag: 'SegmentURL'\n    }, parseAttributes(s));\n  });\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\n\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = {\n      sourceURL: template.initialization\n    };\n  }\n\n  var segmentInfo = {\n    template: template,\n    segmentTimeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\n      return parseAttributes(s);\n    }),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls: segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n  Object.keys(segmentInfo).forEach(function (key) {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n  return segmentInfo;\n};\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {string[]} adaptationSetBaseUrls\n *        Contains list of resolved base urls inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\n\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n  return function (representation) {\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n    var representationSegmentInfo = getSegmentInformation(representation);\n    return repBaseUrls.map(function (baseUrl) {\n      return {\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n        attributes: merge(attributes, {\n          baseUrl: baseUrl\n        })\n      };\n    });\n  };\n};\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\n\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n  return contentProtectionNodes.reduce(function (acc, node) {\n    var attributes = parseAttributes(node);\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\n\n    if (keySystem) {\n      acc[keySystem] = {\n        attributes: attributes\n      };\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\n\n      if (psshNode) {\n        var pssh = getContent(psshNode);\n        var psshBuffer = pssh && decodeB64ToUint8Array(pssh);\n        acc[keySystem].pssh = psshBuffer;\n      }\n    }\n\n    return acc;\n  }, {});\n}; // defined in ANSI_SCTE 214-1 2016\n\n\nvar parseCaptionServiceMetadata = function parseCaptionServiceMetadata(service) {\n  // 608 captions\n  if (service.schemeIdUri === 'urn:scte:dash:cc:cea-608:2015') {\n    var values = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return values.map(function (value) {\n      var channel;\n      var language; // default language to value\n\n      language = value;\n\n      if (/^CC\\d=/.test(value)) {\n        var _value$split = value.split('=');\n\n        channel = _value$split[0];\n        language = _value$split[1];\n      } else if (/^CC\\d$/.test(value)) {\n        channel = value;\n      }\n\n      return {\n        channel: channel,\n        language: language\n      };\n    });\n  } else if (service.schemeIdUri === 'urn:scte:dash:cc:cea-708:2015') {\n    var _values = typeof service.value !== 'string' ? [] : service.value.split(';');\n\n    return _values.map(function (value) {\n      var flags = {\n        // service or channel number 1-63\n        'channel': undefined,\n        // language is a 3ALPHA per ISO 639.2/B\n        // field is required\n        'language': undefined,\n        // BIT 1/0 or ?\n        // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown\n        'aspectRatio': 1,\n        // BIT 1/0\n        // easy reader flag indicated the text is tailed to the needs of beginning readers\n        // default 0, or off\n        'easyReader': 0,\n        // BIT 1/0\n        // If 3d metadata is present (CEA-708.1) then 1\n        // default 0\n        '3D': 0\n      };\n\n      if (/=/.test(value)) {\n        var _value$split2 = value.split('='),\n            channel = _value$split2[0],\n            _value$split2$ = _value$split2[1],\n            opts = _value$split2$ === void 0 ? '' : _value$split2$;\n\n        flags.channel = channel;\n        flags.language = value;\n        opts.split(',').forEach(function (opt) {\n          var _opt$split = opt.split(':'),\n              name = _opt$split[0],\n              val = _opt$split[1];\n\n          if (name === 'lang') {\n            flags.language = val; // er for easyReadery\n          } else if (name === 'er') {\n            flags.easyReader = Number(val); // war for wide aspect ratio\n          } else if (name === 'war') {\n            flags.aspectRatio = Number(val);\n          } else if (name === '3D') {\n            flags['3D'] = Number(val);\n          }\n        });\n      } else {\n        flags.language = value;\n      }\n\n      if (flags.channel) {\n        flags.channel = 'SERVICE' + flags.channel;\n      }\n\n      return flags;\n    });\n  }\n};\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {string[]} periodBaseUrls\n *        Contains list of resolved base urls inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\n\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n  return function (adaptationSet) {\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n    var role = findChildren(adaptationSet, 'Role')[0];\n    var roleAttributes = {\n      role: parseAttributes(role)\n    };\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n    var accessibility = findChildren(adaptationSet, 'Accessibility')[0];\n    var captionServices = parseCaptionServiceMetadata(parseAttributes(accessibility));\n\n    if (captionServices) {\n      attrs = merge(attrs, {\n        captionServices: captionServices\n      });\n    }\n\n    var label = findChildren(adaptationSet, 'Label')[0];\n\n    if (label && label.childNodes.length) {\n      var labelVal = label.childNodes[0].nodeValue.trim();\n      attrs = merge(attrs, {\n        label: labelVal\n      });\n    }\n\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n\n    if (Object.keys(contentProtection).length) {\n      attrs = merge(attrs, {\n        contentProtection: contentProtection\n      });\n    }\n\n    var segmentInfo = getSegmentInformation(adaptationSet);\n    var representations = findChildren(adaptationSet, 'Representation');\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n  };\n};\n/**\n * Contains all period information for mapping nodes onto adaptation sets.\n *\n * @typedef {Object} PeriodInformation\n * @property {Node} period.node\n *           Period node from the mpd\n * @property {Object} period.attributes\n *           Parsed period attributes from node plus any added\n */\n\n/**\n * Maps a PeriodInformation object to a list of Representation information objects for all\n * AdaptationSet nodes contained within the Period.\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {PeriodInformation} period\n *        Period object containing necessary period information\n * @param {number} periodStart\n *        Start time of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n * @param {string[]} mpdBaseUrls\n *        Contains list of resolved base urls inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\n\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n  return function (period, index) {\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period.node, 'BaseURL'));\n    var periodAttributes = merge(mpdAttributes, {\n      periodStart: period.attributes.start\n    });\n\n    if (typeof period.attributes.duration === 'number') {\n      periodAttributes.periodDuration = period.attributes.duration;\n    }\n\n    var adaptationSets = findChildren(period.node, 'AdaptationSet');\n    var periodSegmentInfo = getSegmentInformation(period.node);\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n  };\n};\n/**\n * Gets Period@start property for a given period.\n *\n * @param {Object} options\n *        Options object\n * @param {Object} options.attributes\n *        Period attributes\n * @param {Object} [options.priorPeriodAttributes]\n *        Prior period attributes (if prior period is available)\n * @param {string} options.mpdType\n *        The MPD@type these periods came from\n * @return {number|null}\n *         The period start, or null if it's an early available period or error\n */\n\nvar getPeriodStart = function getPeriodStart(_ref) {\n  var attributes = _ref.attributes,\n      priorPeriodAttributes = _ref.priorPeriodAttributes,\n      mpdType = _ref.mpdType;\n\n  // Summary of period start time calculation from DASH spec section 5.3.2.1\n  //\n  // A period's start is the first period's start + time elapsed after playing all\n  // prior periods to this one. Periods continue one after the other in time (without\n  // gaps) until the end of the presentation.\n  //\n  // The value of Period@start should be:\n  // 1. if Period@start is present: value of Period@start\n  // 2. if previous period exists and it has @duration: previous Period@start +\n  //    previous Period@duration\n  // 3. if this is first period and MPD@type is 'static': 0\n  // 4. in all other cases, consider the period an \"early available period\" (note: not\n  //    currently supported)\n  // (1)\n  if (typeof attributes.start === 'number') {\n    return attributes.start;\n  } // (2)\n\n\n  if (priorPeriodAttributes && typeof priorPeriodAttributes.start === 'number' && typeof priorPeriodAttributes.duration === 'number') {\n    return priorPeriodAttributes.start + priorPeriodAttributes.duration;\n  } // (3)\n\n\n  if (!priorPeriodAttributes && mpdType === 'static') {\n    return 0;\n  } // (4)\n  // There is currently no logic for calculating the Period@start value if there is\n  // no Period@start or prior Period@start and Period@duration available. This is not made\n  // explicit by the DASH interop guidelines or the DASH spec, however, since there's\n  // nothing about any other resolution strategies, it's implied. Thus, this case should\n  // be considered an early available period, or error, and null should suffice for both\n  // of those cases.\n\n\n  return null;\n};\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\n\nvar inheritAttributes = function inheritAttributes(mpd, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$manifestUri = _options.manifestUri,\n      manifestUri = _options$manifestUri === void 0 ? '' : _options$manifestUri,\n      _options$NOW = _options.NOW,\n      NOW = _options$NOW === void 0 ? Date.now() : _options$NOW,\n      _options$clientOffset = _options.clientOffset,\n      clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;\n  var periodNodes = findChildren(mpd, 'Period');\n\n  if (!periodNodes.length) {\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n\n  var locations = findChildren(mpd, 'Location');\n  var mpdAttributes = parseAttributes(mpd);\n  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL')); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.\n\n  mpdAttributes.type = mpdAttributes.type || 'static';\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n\n  if (locations.length) {\n    mpdAttributes.locations = locations.map(getContent);\n  }\n\n  var periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to\n  // adding properties that require looking at prior periods is to parse attributes and add\n  // missing ones before toAdaptationSets is called. If more such properties are added, it\n  // may be better to refactor toAdaptationSets.\n\n  periodNodes.forEach(function (node, index) {\n    var attributes = parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary\n    // for this period.\n\n    var priorPeriod = periods[index - 1];\n    attributes.start = getPeriodStart({\n      attributes: attributes,\n      priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,\n      mpdType: mpdAttributes.type\n    });\n    periods.push({\n      node: node,\n      attributes: attributes\n    });\n  });\n  return {\n    locations: mpdAttributes.locations,\n    representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)))\n  };\n};\n\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n\n  var parser = new DOMParser();\n  var xml;\n  var mpd;\n\n  try {\n    xml = parser.parseFromString(manifestString, 'application/xml');\n    mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n  } catch (e) {// ie 11 throwsw on invalid xml\n  }\n\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n\n  return mpd;\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n\n  if (!UTCTimingNode) {\n    return null;\n  }\n\n  var attributes = parseAttributes(UTCTimingNode);\n\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n\n  return attributes;\n};\n\nvar VERSION = version;\n/*\n * Given a DASH manifest string and options, parses the DASH manifest into an object in the\n * form outputed by m3u8-parser and accepted by videojs/http-streaming.\n *\n * For live DASH manifests, if `previousManifest` is provided in options, then the newly\n * parsed DASH manifest will have its media sequence and discontinuity sequence values\n * updated to reflect its position relative to the prior manifest.\n *\n * @param {string} manifestString - the DASH manifest as a string\n * @param {options} [options] - any options\n *\n * @return {Object} the manifest object\n */\n\nvar parse = function parse(manifestString, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\n  var playlists = toPlaylists(parsedManifestInfo.representationInfo);\n  return toM3u8({\n    dashPlaylists: playlists,\n    locations: parsedManifestInfo.locations,\n    sidxMapping: options.sidxMapping,\n    previousManifest: options.previousManifest\n  });\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\n\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\n\nexport { VERSION, addSidxSegmentsToPlaylist$1 as addSidxSegmentsToPlaylist, generateSidxKey, inheritAttributes, parse, parseUTCTiming, stringToMpdXml, toM3u8, toPlaylists };\n"]},"metadata":{},"sourceType":"module"}