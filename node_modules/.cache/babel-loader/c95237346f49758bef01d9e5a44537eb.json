{"ast":null,"code":"'use strict';\n\nconst {\n  getExtension\n} = require('./createThumbImage');\n\nconst readPdf = require('./readPdf');\n\nmodule.exports = function pdfthumbnail(data, config) {\n  return new Promise((resolve, reject) => {\n    var file = data.name ? data : data[0];\n    var isVideo = config.fileName ? 0 : 1;\n    var {\n      fileName,\n      extension\n    } = getExtension(config.fileName || file.name, isVideo);\n    fileName = `${fileName}.${extension}`;\n    var allowedExtensions = data.substr(data.lastIndexOf('.') + 1);\n\n    if (/(pdf|zip|doc)$/gi.test(allowedExtensions)) {\n      try {\n        resolve(readPdf(data, config));\n      } catch (err) {\n        reject({\n          error: true,\n          errorDetails: err\n        });\n      }\n    } else {\n      reject({\n        error: true,\n        errorDetails: {\n          wrongFile: true,\n          message: 'File type is not pdf'\n        }\n      });\n    }\n  });\n};","map":{"version":3,"sources":["/home/erwan/Documents/Frontend/reactjs/node_modules/react-pdf-thumbnail/lib/pdfthumbnail.js"],"names":["getExtension","require","readPdf","module","exports","pdfthumbnail","data","config","Promise","resolve","reject","file","name","isVideo","fileName","extension","allowedExtensions","substr","lastIndexOf","test","err","error","errorDetails","wrongFile","message"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,MAA5B,EAAoC;AACpD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,QAAIC,IAAI,GAAGL,IAAI,CAACM,IAAL,GAAYN,IAAZ,GAAmBA,IAAI,CAAC,CAAD,CAAlC;AACA,QAAIO,OAAO,GAAGN,MAAM,CAACO,QAAP,GAAkB,CAAlB,GAAsB,CAApC;AACA,QAAI;AAAEA,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0Bf,YAAY,CACzCO,MAAM,CAACO,QAAP,IAAmBH,IAAI,CAACC,IADiB,EAEzCC,OAFyC,CAA1C;AAIAC,IAAAA,QAAQ,GAAI,GAAEA,QAAS,IAAGC,SAAU,EAApC;AACA,QAAIC,iBAAiB,GAAGV,IAAI,CAACW,MAAL,CAAYX,IAAI,CAACY,WAAL,CAAiB,GAAjB,IAAwB,CAApC,CAAxB;;AACA,QAAI,mBAAmBC,IAAnB,CAAwBH,iBAAxB,CAAJ,EAAgD;AAC/C,UAAI;AACHP,QAAAA,OAAO,CAACP,OAAO,CAACI,IAAD,EAAOC,MAAP,CAAR,CAAP;AACA,OAFD,CAEE,OAAOa,GAAP,EAAY;AACbV,QAAAA,MAAM,CAAC;AAAEW,UAAAA,KAAK,EAAE,IAAT;AAAeC,UAAAA,YAAY,EAAEF;AAA7B,SAAD,CAAN;AACA;AACD,KAND,MAMO;AACNV,MAAAA,MAAM,CAAC;AACNW,QAAAA,KAAK,EAAE,IADD;AAENC,QAAAA,YAAY,EAAE;AACbC,UAAAA,SAAS,EAAE,IADE;AAEbC,UAAAA,OAAO,EAAE;AAFI;AAFR,OAAD,CAAN;AAOA;AACD,GAxBM,CAAP;AAyBA,CA1BD","sourcesContent":["'use strict';\nconst { getExtension } = require('./createThumbImage');\nconst readPdf = require('./readPdf');\nmodule.exports = function pdfthumbnail(data, config) {\n\treturn new Promise((resolve, reject) => {\n\t\tvar file = data.name ? data : data[0];\n\t\tvar isVideo = config.fileName ? 0 : 1;\n\t\tvar { fileName, extension } = getExtension(\n\t\t\tconfig.fileName || file.name,\n\t\t\tisVideo\n\t\t);\n\t\tfileName = `${fileName}.${extension}`;\n\t\tvar allowedExtensions = data.substr(data.lastIndexOf('.') + 1);\n\t\tif (/(pdf|zip|doc)$/gi.test(allowedExtensions)) {\n\t\t\ttry {\n\t\t\t\tresolve(readPdf(data, config));\n\t\t\t} catch (err) {\n\t\t\t\treject({ error: true, errorDetails: err });\n\t\t\t}\n\t\t} else {\n\t\t\treject({\n\t\t\t\terror: true,\n\t\t\t\terrorDetails: {\n\t\t\t\t\twrongFile: true,\n\t\t\t\t\tmessage: 'File type is not pdf',\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}