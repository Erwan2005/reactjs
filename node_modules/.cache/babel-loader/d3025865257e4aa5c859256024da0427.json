{"ast":null,"code":"\"use strict\";\n\nvar window = require('global/window');\n\nvar httpResponseHandler = function httpResponseHandler(callback, decodeResponseBody) {\n  if (decodeResponseBody === void 0) {\n    decodeResponseBody = false;\n  }\n\n  return function (err, response, responseBody) {\n    // if the XHR failed, return that error\n    if (err) {\n      callback(err);\n      return;\n    } // if the HTTP status code is 4xx or 5xx, the request also failed\n\n\n    if (response.statusCode >= 400 && response.statusCode <= 599) {\n      var cause = responseBody;\n\n      if (decodeResponseBody) {\n        if (window.TextDecoder) {\n          var charset = getCharset(response.headers && response.headers['content-type']);\n\n          try {\n            cause = new TextDecoder(charset).decode(responseBody);\n          } catch (e) {}\n        } else {\n          cause = String.fromCharCode.apply(null, new Uint8Array(responseBody));\n        }\n      }\n\n      callback({\n        cause: cause\n      });\n      return;\n    } // otherwise, request succeeded\n\n\n    callback(null, responseBody);\n  };\n};\n\nfunction getCharset(contentTypeHeader) {\n  if (contentTypeHeader === void 0) {\n    contentTypeHeader = '';\n  }\n\n  return contentTypeHeader.toLowerCase().split(';').reduce(function (charset, contentType) {\n    var _contentType$split = contentType.split('='),\n        type = _contentType$split[0],\n        value = _contentType$split[1];\n\n    if (type.trim() === 'charset') {\n      return value.trim();\n    }\n\n    return charset;\n  }, 'utf-8');\n}\n\nmodule.exports = httpResponseHandler;","map":{"version":3,"sources":["/home/erwan/Documents/Frontend/reactjs/node_modules/@videojs/xhr/lib/http-handler.js"],"names":["window","require","httpResponseHandler","callback","decodeResponseBody","err","response","responseBody","statusCode","cause","TextDecoder","charset","getCharset","headers","decode","e","String","fromCharCode","apply","Uint8Array","contentTypeHeader","toLowerCase","split","reduce","contentType","_contentType$split","type","value","trim","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAApB;;AAEA,IAAIC,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,QAA7B,EAAuCC,kBAAvC,EAA2D;AACnF,MAAIA,kBAAkB,KAAK,KAAK,CAAhC,EAAmC;AACjCA,IAAAA,kBAAkB,GAAG,KAArB;AACD;;AAED,SAAO,UAAUC,GAAV,EAAeC,QAAf,EAAyBC,YAAzB,EAAuC;AAC5C;AACA,QAAIF,GAAJ,EAAS;AACPF,MAAAA,QAAQ,CAACE,GAAD,CAAR;AACA;AACD,KAL2C,CAK1C;;;AAGF,QAAIC,QAAQ,CAACE,UAAT,IAAuB,GAAvB,IAA8BF,QAAQ,CAACE,UAAT,IAAuB,GAAzD,EAA8D;AAC5D,UAAIC,KAAK,GAAGF,YAAZ;;AAEA,UAAIH,kBAAJ,EAAwB;AACtB,YAAIJ,MAAM,CAACU,WAAX,EAAwB;AACtB,cAAIC,OAAO,GAAGC,UAAU,CAACN,QAAQ,CAACO,OAAT,IAAoBP,QAAQ,CAACO,OAAT,CAAiB,cAAjB,CAArB,CAAxB;;AAEA,cAAI;AACFJ,YAAAA,KAAK,GAAG,IAAIC,WAAJ,CAAgBC,OAAhB,EAAyBG,MAAzB,CAAgCP,YAAhC,CAAR;AACD,WAFD,CAEE,OAAOQ,CAAP,EAAU,CAAE;AACf,SAND,MAMO;AACLN,UAAAA,KAAK,GAAGO,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgC,IAAIC,UAAJ,CAAeZ,YAAf,CAAhC,CAAR;AACD;AACF;;AAEDJ,MAAAA,QAAQ,CAAC;AACPM,QAAAA,KAAK,EAAEA;AADA,OAAD,CAAR;AAGA;AACD,KA3B2C,CA2B1C;;;AAGFN,IAAAA,QAAQ,CAAC,IAAD,EAAOI,YAAP,CAAR;AACD,GA/BD;AAgCD,CArCD;;AAuCA,SAASK,UAAT,CAAoBQ,iBAApB,EAAuC;AACrC,MAAIA,iBAAiB,KAAK,KAAK,CAA/B,EAAkC;AAChCA,IAAAA,iBAAiB,GAAG,EAApB;AACD;;AAED,SAAOA,iBAAiB,CAACC,WAAlB,GAAgCC,KAAhC,CAAsC,GAAtC,EAA2CC,MAA3C,CAAkD,UAAUZ,OAAV,EAAmBa,WAAnB,EAAgC;AACvF,QAAIC,kBAAkB,GAAGD,WAAW,CAACF,KAAZ,CAAkB,GAAlB,CAAzB;AAAA,QACII,IAAI,GAAGD,kBAAkB,CAAC,CAAD,CAD7B;AAAA,QAEIE,KAAK,GAAGF,kBAAkB,CAAC,CAAD,CAF9B;;AAIA,QAAIC,IAAI,CAACE,IAAL,OAAgB,SAApB,EAA+B;AAC7B,aAAOD,KAAK,CAACC,IAAN,EAAP;AACD;;AAED,WAAOjB,OAAP;AACD,GAVM,EAUJ,OAVI,CAAP;AAWD;;AAEDkB,MAAM,CAACC,OAAP,GAAiB5B,mBAAjB","sourcesContent":["\"use strict\";\n\nvar window = require('global/window');\n\nvar httpResponseHandler = function httpResponseHandler(callback, decodeResponseBody) {\n  if (decodeResponseBody === void 0) {\n    decodeResponseBody = false;\n  }\n\n  return function (err, response, responseBody) {\n    // if the XHR failed, return that error\n    if (err) {\n      callback(err);\n      return;\n    } // if the HTTP status code is 4xx or 5xx, the request also failed\n\n\n    if (response.statusCode >= 400 && response.statusCode <= 599) {\n      var cause = responseBody;\n\n      if (decodeResponseBody) {\n        if (window.TextDecoder) {\n          var charset = getCharset(response.headers && response.headers['content-type']);\n\n          try {\n            cause = new TextDecoder(charset).decode(responseBody);\n          } catch (e) {}\n        } else {\n          cause = String.fromCharCode.apply(null, new Uint8Array(responseBody));\n        }\n      }\n\n      callback({\n        cause: cause\n      });\n      return;\n    } // otherwise, request succeeded\n\n\n    callback(null, responseBody);\n  };\n};\n\nfunction getCharset(contentTypeHeader) {\n  if (contentTypeHeader === void 0) {\n    contentTypeHeader = '';\n  }\n\n  return contentTypeHeader.toLowerCase().split(';').reduce(function (charset, contentType) {\n    var _contentType$split = contentType.split('='),\n        type = _contentType$split[0],\n        value = _contentType$split[1];\n\n    if (type.trim() === 'charset') {\n      return value.trim();\n    }\n\n    return charset;\n  }, 'utf-8');\n}\n\nmodule.exports = httpResponseHandler;"]},"metadata":{},"sourceType":"script"}