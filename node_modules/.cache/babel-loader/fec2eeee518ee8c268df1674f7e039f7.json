{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n  if (initialValue === void 0) {\n    initialValue = '';\n  }\n\n  var _useState = useState(function () {\n    return window.localStorage.getItem(key) || initialValue;\n  }),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var setItem = function setItem(newValue) {\n    setValue(newValue);\n    window.localStorage.setItem(key, newValue);\n  };\n\n  useEffect(function () {\n    var newValue = window.localStorage.getItem(key);\n\n    if (value !== newValue) {\n      setValue(newValue || initialValue);\n    }\n  });\n  var handleStorage = useCallback(function (event) {\n    if (event.key === key && event.newValue !== value) {\n      setValue(event.newValue || initialValue);\n    }\n  }, [value]);\n  useEffect(function () {\n    window.addEventListener('storage', handleStorage);\n    return function () {\n      return window.removeEventListener('storage', handleStorage);\n    };\n  }, [handleStorage]);\n  return [value, setItem];\n}\n\nexport default useLocalStorage;","map":{"version":3,"sources":["../src/index.ts"],"names":["useLocalStorage","key","initialValue","value","setValue","useState","window","setItem","useEffect","newValue","handleStorage","useCallback","event"],"mappings":";;SAEwBA,e,CACtBC,G,EACAC,Y,EAAAA;MAAAA,YAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,YAAAA,GAAuB,EAAvBA;;;kBAE0BG,QAAQ,CAChC,YAAA;AAAA,WAAMC,MAAM,CAANA,YAAAA,CAAAA,OAAAA,CAAAA,GAAAA,KAAN,YAAA;AADgC,GAAA,C;MAA3BH,KAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAAOC,QAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;AAId,MAAMG,OAAO,GAAG,SAAVA,OAAU,CAAA,QAAA,EAAA;AACdH,IAAAA,QAAQ,CAARA,QAAQ,CAARA;AACAE,IAAAA,MAAM,CAANA,YAAAA,CAAAA,OAAAA,CAAAA,GAAAA,EAAAA,QAAAA;AAFF,GAAA;;AAKAE,EAAAA,SAAS,CAAC,YAAA;AACR,QAAMC,QAAQ,GAAGH,MAAM,CAANA,YAAAA,CAAAA,OAAAA,CAAjB,GAAiBA,CAAjB;;AACA,QAAIH,KAAK,KAAT,QAAA,EAAwB;AACtBC,MAAAA,QAAQ,CAACK,QAAQ,IAAjBL,YAAQ,CAARA;AACD;AAJHI,GAAS,CAATA;AAOA,MAAME,aAAa,GAAGC,WAAW,CAC/B,UAAA,KAAA,EAAA;AACE,QAAIC,KAAK,CAALA,GAAAA,KAAAA,GAAAA,IAAqBA,KAAK,CAALA,QAAAA,KAAzB,KAAA,EAAmD;AACjDR,MAAAA,QAAQ,CAACQ,KAAK,CAALA,QAAAA,IAATR,YAAQ,CAARA;AACD;AAJ4B,GAAA,EAM/B,CANF,KAME,CAN+B,CAAjC;AASAI,EAAAA,SAAS,CAAC,YAAA;AACRF,IAAAA,MAAM,CAANA,gBAAAA,CAAAA,SAAAA,EAAAA,aAAAA;AACA,WAAO,YAAA;AAAA,aAAMA,MAAM,CAANA,mBAAAA,CAAAA,SAAAA,EAAN,aAAMA,CAAN;AAAP,KAAA;AAFO,GAAA,EAGN,CAHHE,aAGG,CAHM,CAATA;AAKA,SAAO,CAAA,KAAA,EAAP,OAAO,CAAP;AACD","sourcesContent":["import { Dispatch, useCallback, useEffect, useState } from 'react';\n\nexport default function useLocalStorage(\n  key: string,\n  initialValue: string = ''\n): [string, Dispatch<string>] {\n  const [value, setValue] = useState(\n    () => window.localStorage.getItem(key) || initialValue\n  );\n\n  const setItem = (newValue: string) => {\n    setValue(newValue);\n    window.localStorage.setItem(key, newValue);\n  };\n\n  useEffect(() => {\n    const newValue = window.localStorage.getItem(key);\n    if (value !== newValue) {\n      setValue(newValue || initialValue);\n    }\n  });\n\n  const handleStorage = useCallback(\n    (event: StorageEvent) => {\n      if (event.key === key && event.newValue !== value) {\n        setValue(event.newValue || initialValue);\n      }\n    },\n    [value]\n  );\n\n  useEffect(() => {\n    window.addEventListener('storage', handleStorage);\n    return () => window.removeEventListener('storage', handleStorage);\n  }, [handleStorage]);\n\n  return [value, setItem];\n}\n"]},"metadata":{},"sourceType":"module"}