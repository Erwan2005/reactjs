{"version":3,"file":"react-use-localstorage.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { Dispatch, useCallback, useEffect, useState } from 'react';\n\nexport default function useLocalStorage(\n  key: string,\n  initialValue: string = ''\n): [string, Dispatch<string>] {\n  const [value, setValue] = useState(\n    () => window.localStorage.getItem(key) || initialValue\n  );\n\n  const setItem = (newValue: string) => {\n    setValue(newValue);\n    window.localStorage.setItem(key, newValue);\n  };\n\n  useEffect(() => {\n    const newValue = window.localStorage.getItem(key);\n    if (value !== newValue) {\n      setValue(newValue || initialValue);\n    }\n  });\n\n  const handleStorage = useCallback(\n    (event: StorageEvent) => {\n      if (event.key === key && event.newValue !== value) {\n        setValue(event.newValue || initialValue);\n      }\n    },\n    [value]\n  );\n\n  useEffect(() => {\n    window.addEventListener('storage', handleStorage);\n    return () => window.removeEventListener('storage', handleStorage);\n  }, [handleStorage]);\n\n  return [value, setItem];\n}\n"],"names":["key","initialValue","useState","window","localStorage","getItem","value","setValue","useEffect","newValue","handleStorage","useCallback","event","addEventListener","removeEventListener","setItem"],"mappings":"oHAGEA,EACAC,YAAAA,IAAAA,EAAuB,UAEGC,YACxB,kBAAMC,OAAOC,aAAaC,QAAQL,IAAQC,KADrCK,OAAOC,OASdC,aAAU,eACFC,EAAWN,OAAOC,aAAaC,QAAQL,GACzCM,IAAUG,GACZF,EAASE,GAAYR,UAInBS,EAAgBC,eACpB,SAACC,GACKA,EAAMZ,MAAQA,GAAOY,EAAMH,WAAaH,GAC1CC,EAASK,EAAMH,UAAYR,KAG/B,CAACK,WAGHE,aAAU,kBACRL,OAAOU,iBAAiB,UAAWH,GAC5B,kBAAMP,OAAOW,oBAAoB,UAAWJ,MAClD,CAACA,IAEG,CAACJ,EA1BQ,SAACG,GACfF,EAASE,GACTN,OAAOC,aAAaW,QAAQf,EAAKS"}